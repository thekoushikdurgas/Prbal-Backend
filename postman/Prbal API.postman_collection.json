{
	"info": {
		"_postman_id": "c6ef0918-c0ce-4753-8c17-259e292edb57",
		"name": "Prbal API",
		"description": "API collection for the Prbal application, generated from Prbal-API.md. Covers user types: providers, customers, and admins.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20572666",
		"_collection_link": "https://prbal5-1003.postman.co/workspace/prbal~38626842-f3c9-4a6f-a7bc-0367cd9a6824/collection/20572666-c6ef0918-c0ce-4753-8c17-259e292edb57?action=share&source=collection_link&creator=20572666"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "User Registration",
					"item": [
						{
							"name": "Generic User Registration (Defaults to Customer)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"if (jsonData.tokens && jsonData.tokens.access) {",
											"    pm.environment.set(\"access_token\", jsonData.tokens.access);",
											"}",
											"if (jsonData.tokens && jsonData.tokens.refresh) {",
											"    pm.environment.set(\"refresh_token\", jsonData.tokens.refresh);",
											"}",
											"if (jsonData.user && jsonData.user.id) {",
											"    pm.environment.set(\"user_id\", jsonData.user.id);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"newgenericuser12\",\n    \"email\": \"generic12@example.com\",\n    \"password\": \"newpassword123\",\n    \"password_confirm\": \"newpassword123\",\n    \"phone_number\": \"{{phone_number}}\",\n    \"first_name\": \"Generic\",\n    \"last_name\": \"User\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/auth/register/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"auth",
										"register",
										""
									]
								},
								"description": "Allows new users to register. By default, this endpoint registers a user with the 'customer' type. For specific roles like 'provider' or 'admin', use their dedicated registration endpoints.\n\n**Permissions:** Anonymous User\n\n**Required fields:** `username`, `email`, `password`, `password_confirm`\n**Optional fields:** `phone_number`, `first_name`, `last_name`"
							},
							"response": [
								{
									"name": "Success - User Registered (201 Created)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"newgenericuser\",\n    \"email\": \"generic@example.com\",\n    \"password\": \"newpassword123\",\n    \"password_confirm\": \"newpassword123\",\n    \"phone_number\": \"{{phone_number}}\",\n    \"first_name\": \"Generic\",\n    \"last_name\": \"User\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/register/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"register",
												""
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"user\": {\n        \"id\": \"usr_01H...\",\n        \"username\": \"newgenericuser\",\n        \"email\": \"generic@example.com\",\n        \"phone_number\": \"{{phone_number}}\",\n        \"first_name\": \"Generic\",\n        \"last_name\": \"User\",\n        \"user_type\": \"customer\",\n        \"profile_picture\": null,\n        \"bio\": null,\n        \"location\": null,\n        \"is_verified\": false,\n        \"rating\": 0.0,\n        \"balance\": \"0.00\",\n        \"created_at\": \"2023-10-27T10:00:00Z\",\n        \"updated_at\": \"2023-10-27T10:00:00Z\"\n    },\n    \"tokens\": {\n        \"refresh\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n        \"access\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n    },\n    \"message\": \"customer registered successfully\"\n}"
								},
								{
									"name": "Error - Validation Error (400 Bad Request)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"newgenericuser\",\n    \"email\": \"generic@example.com\",\n    \"password\": \"newpassword123\",\n    \"password_confirm\": \"newpassword123\",\n    \"phone_number\": \"{{phone_number}}\",\n    \"first_name\": \"Generic\",\n    \"last_name\": \"User\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/register/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"register",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"email\": [\n        \"A user with that email address already exists.\"\n    ],\n    \"password\": [\n        \"Password fields didn't match.\"\n    ],\n    \"username\": [\n        \"A user with that username already exists.\"\n    ]\n}"
								},
								{
									"name": "Error - Missing Fields (400 Bad Request)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"newgenericuser\",\n    \"email\": \"generic@example.com\",\n    \"password\": \"newpassword123\",\n    \"password_confirm\": \"newpassword123\",\n    \"phone_number\": \"{{phone_number}}\",\n    \"first_name\": \"Generic\",\n    \"last_name\": \"User\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/register/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"register",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"username\": [\n        \"This field is required.\"\n    ],\n    \"email\": [\n        \"This field is required.\"\n    ],\n    \"password\": [\n        \"This field is required.\"\n    ],\n    \"password_confirm\": [\n        \"This field is required.\"\n    ]\n}"
								}
							]
						},
						{
							"name": "Customer Registration",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"newcustomer\",\n    \"email\": \"{{customer_email}}\",\n    \"password\": \"{{customer_password}}\",\n    \"password_confirm\": \"{{customer_password}}\",\n    \"phone_number\": \"{{phone_number}}\",\n    \"first_name\": \"Customer\",\n    \"last_name\": \"Person\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/auth/customer/register/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"auth",
										"customer",
										"register",
										""
									]
								},
								"description": "Allows new users to register specifically as a 'customer'.\n\n**Permissions:** Anonymous User\n\n**Required fields:** `username`, `email`, `password`, `password_confirm`\n**Optional fields:** `phone_number`, `first_name`, `last_name`"
							},
							"response": [
								{
									"name": "Success - Customer Registered (201 Created)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"newcustomer\",\n    \"email\": \"{{customer_email}}\",\n    \"password\": \"{{customer_password}}\",\n    \"password_confirm\": \"{{customer_password}}\",\n    \"phone_number\": \"{{phone_number}}\",\n    \"first_name\": \"Customer\",\n    \"last_name\": \"Person\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/customer/register/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"customer",
												"register",
												""
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"user\": {\n        \"id\": \"usr_01H...\",\n        \"username\": \"newcustomer\",\n        \"email\": \"{{customer_email}}\",\n        \"phone_number\": \"0987654321\",\n        \"first_name\": \"Customer\",\n        \"last_name\": \"Person\",\n        \"user_type\": \"customer\",\n        \"profile_picture\": null,\n        \"bio\": null,\n        \"location\": null,\n        \"is_verified\": false,\n        \"rating\": 0.0,\n        \"balance\": \"0.00\",\n        \"created_at\": \"2023-10-27T10:00:00Z\",\n        \"updated_at\": \"2023-10-27T10:00:00Z\"\n    },\n    \"tokens\": {\n        \"refresh\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n        \"access\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n    },\n    \"message\": \"customer registered successfully\"\n}"
								},
								{
									"name": "Error - Validation Error (400 Bad Request)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"newcustomer\",\n    \"email\": \"{{customer_email}}\",\n    \"password\": \"{{customer_password}}\",\n    \"password_confirm\": \"{{customer_password}}\",\n    \"phone_number\": \"{{phone_number}}\",\n    \"first_name\": \"Customer\",\n    \"last_name\": \"Person\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/customer/register/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"customer",
												"register",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"email\": [\n        \"A user with that email address already exists.\"\n    ],\n    \"username\": [\n        \"A user with that username already exists.\"\n    ]\n}"
								},
								{
									"name": "Error - Missing Fields (400 Bad Request)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"newcustomer\",\n    \"email\": \"{{customer_email}}\",\n    \"password\": \"{{customer_password}}\",\n    \"password_confirm\": \"{{customer_password}}\",\n    \"phone_number\": \"{{phone_number}}\",\n    \"first_name\": \"Customer\",\n    \"last_name\": \"Person\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/customer/register/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"customer",
												"register",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"username\": [\n        \"This field is required.\"\n    ],\n    \"email\": [\n        \"This field is required.\"\n    ],\n    \"password\": [\n        \"This field is required.\"\n    ],\n    \"password_confirm\": [\n        \"This field is required.\"\n    ]\n}"
								}
							]
						},
						{
							"name": "Provider Specific Registration",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"newprovider1\",\n    \"email\": \"{{provider_email}}\",\n    \"password\": \"{{provider_password}}\",\n    \"password_confirm\": \"{{provider_password}}\",\n    \"phone_number\": \"11223344551\",\n    \"first_name\": \"Pro\",\n    \"last_name\": \"Vider\",\n    \"skills\": {\n        \"cleaning\": \"expert\",\n        \"gardening\": \"intermediate\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/auth/provider/register/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"auth",
										"provider",
										"register",
										""
									]
								},
								"description": "Allows new users to register specifically as a 'provider'.\n\n**Permissions:** Anonymous User\n\n**Required fields:** `username`, `email`, `password`, `password_confirm`\n**Optional fields:** `phone_number`, `first_name`, `last_name`, `skills` (JSON object)"
							},
							"response": [
								{
									"name": "Success - Provider Registered (201 Created)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"newprovider\",\n    \"email\": \"{{provider_email}}\",\n    \"password\": \"{{provider_password}}\",\n    \"password_confirm\": \"{{provider_password}}\",\n    \"phone_number\": \"1122334455\",\n    \"first_name\": \"Pro\",\n    \"last_name\": \"Vider\",\n    \"skills\": {\n        \"cleaning\": \"expert\",\n        \"gardening\": \"intermediate\"\n    }\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/provider/register/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"provider",
												"register",
												""
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"user\": {\n        \"id\": \"usr_01H...\",\n        \"username\": \"newprovider\",\n        \"email\": \"{{provider_email}}\",\n        \"phone_number\": \"1122334455\",\n        \"first_name\": \"Pro\",\n        \"last_name\": \"Vider\",\n        \"user_type\": \"provider\",\n        \"profile_picture\": null,\n        \"bio\": null,\n        \"location\": null,\n        \"is_verified\": false,\n        \"rating\": 0.0,\n        \"balance\": \"0.00\",\n        \"skills\": {\"cleaning\": \"expert\"},\n        \"created_at\": \"2023-10-28T10:00:00Z\",\n        \"updated_at\": \"2023-10-28T10:00:00Z\"\n    },\n    \"tokens\": {\n        \"refresh\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n        \"access\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n    },\n    \"message\": \"provider registered successfully\"\n}"
								},
								{
									"name": "Error - Validation Error (400 Bad Request)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"newprovider\",\n    \"email\": \"{{provider_email}}\",\n    \"password\": \"{{provider_password}}\",\n    \"password_confirm\": \"{{provider_password}}\",\n    \"phone_number\": \"1122334455\",\n    \"first_name\": \"Pro\",\n    \"last_name\": \"Vider\",\n    \"skills\": {\n        \"cleaning\": \"expert\",\n        \"gardening\": \"intermediate\"\n    }\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/provider/register/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"provider",
												"register",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"email\": [\"A user with that email address already exists.\"],\n    \"username\": [\"A user with that username already exists.\"]\n}"
								}
							]
						},
						{
							"name": "Admin Specific Registration",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"newadmin\",\n    \"email\": \"{{admin_email}}\",\n    \"password\": \"{{admin_password}}\",\n    \"password_confirm\": \"{{admin_password}}\",\n    \"phone_number\": \"5551234567\",\n    \"first_name\": \"Admin\",\n    \"last_name\": \"User\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/auth/admin/register/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"auth",
										"admin",
										"register",
										""
									]
								},
								"description": "Allows new users to register specifically as an 'admin'. Requires special privileges or setup on the backend.\n\n**Permissions:** Anonymous User (potentially restricted on backend)\n\n**Required fields:** `username`, `email`, `password`, `password_confirm`\n**Optional fields:** `phone_number`, `first_name`, `last_name`"
							},
							"response": [
								{
									"name": "Success - Admin Registered (201 Created)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"newadmin\",\n    \"email\": \"{{admin_email}}\",\n    \"password\": \"{{admin_password}}\",\n    \"password_confirm\": \"{{admin_password}}\",\n    \"phone_number\": \"5551234567\",\n    \"first_name\": \"Admin\",\n    \"last_name\": \"User\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/admin/register/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"admin",
												"register",
												""
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"user\": {\n        \"id\": \"usr_01HADM...\",\n        \"username\": \"newadmin\",\n        \"email\": \"admin@example.com\",\n        \"phone_number\": \"5551234567\",\n        \"first_name\": \"Admin\",\n        \"last_name\": \"User\",\n        \"user_type\": \"admin\",\n        \"profile_picture\": null,\n        \"bio\": null,\n        \"location\": null,\n        \"is_verified\": true,\n        \"rating\": 0.0,\n        \"balance\": \"0.00\",\n        \"created_at\": \"2023-10-29T10:00:00Z\",\n        \"updated_at\": \"2023-10-29T10:00:00Z\"\n    },\n    \"tokens\": {\n        \"refresh\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n        \"access\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n    },\n    \"message\": \"admin registered successfully\"\n}"
								},
								{
									"name": "Error - Validation Error (400 Bad Request)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"newadmin\",\n    \"email\": \"{{admin_email}}\",\n    \"password\": \"{{admin_password}}\",\n    \"password_confirm\": \"{{admin_password}}\",\n    \"phone_number\": \"5551234567\",\n    \"first_name\": \"Admin\",\n    \"last_name\": \"User\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/admin/register/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"admin",
												"register",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"email\": [\n        \"A user with that email address already exists.\"\n    ],\n    \"username\": [\n        \"A user with that username already exists.\"\n    ]\n}"
								},
								{
									"name": "Error - Missing Fields (400 Bad Request)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"newadmin\",\n    \"email\": \"{{admin_email}}\",\n    \"password\": \"{{admin_password}}\",\n    \"password_confirm\": \"{{admin_password}}\",\n    \"phone_number\": \"5551234567\",\n    \"first_name\": \"Admin\",\n    \"last_name\": \"User\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/admin/register/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"admin",
												"register",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"username\": [\n        \"This field is required.\"\n    ],\n    \"email\": [\n        \"This field is required.\"\n    ],\n    \"password\": [\n        \"This field is required.\"\n    ],\n    \"password_confirm\": [\n        \"This field is required.\"\n    ]\n}"
								}
							]
						}
					],
					"description": "Endpoints for registering new users."
				},
				{
					"name": "User Login",
					"item": [
						{
							"name": "Search User by Phone Number",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"description": "Optional: Access token for authentication, though endpoint is AllowAny.",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"phone_number\": \"+15551234567\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/users/search/phone/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"users",
										"search",
										"phone",
										""
									]
								},
								"description": "Searches for users by their phone number. \n\n**Permissions:** `AllowAny` (Authentication is optional)\n\n**Request Body Parameters:**\n- `phone_number` (string, required): The phone number to search for. Should be in a recognizable format, preferably E.164."
							},
							"response": [
								{
									"name": "Success - Exact Match Found (200 OK)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_number\": \"+15551234567\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/search/phone/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"search",
												"phone",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User found with exact phone match\",\n    \"user\": {\n        \"id\": \"usr_01HSAMPLEUSERID\",\n        \"username\": \"founduser_phone\",\n        \"first_name\": \"FoundBy\",\n        \"last_name\": \"Phone\",\n        \"user_type\": \"customer\", \n        \"created_at\": \"2023-03-03T11:00:00Z\"\n    },\n    \"status\": \"success\"\n}"
								},
								{
									"name": "Success - Partial Matches Found (200 OK)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_number\": \"12345\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/search/phone/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"search",
												"phone",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Found 2 user(s) with similar phone numbers\",\n    \"users\": [\n        {\n            \"id\": \"usr_01HSAMPLEPARTIAL1\",\n            \"username\": \"partialuser1_phone\",\n            \"user_type\": \"provider\"\n        },\n        {\n            \"id\": \"usr_01HSAMPLEPARTIAL2\",\n            \"username\": \"partialuser2_phone\",\n            \"user_type\": \"customer\"\n        }\n    ],\n    \"status\": \"success\"\n}"
								},
								{
									"name": "Error - Phone Number Not Found (404)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_number\": \"+10000000000\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/search/phone/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"search",
												"phone",
												""
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"No users found with the given phone number\",\n    \"users\": [],\n    \"status\": \"not_found\"\n}"
								},
								{
									"name": "Error - Phone Number Required (400 Bad Request)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_number\": \"\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/search/phone/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"search",
												"phone",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Phone number is required\",\n    \"status\": \"error\"\n}"
								}
							]
						},
						{
							"name": "Generic User Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"if (jsonData.tokens && jsonData.tokens.access) {",
											"    pm.environment.set(\"access_token\", jsonData.tokens.access);",
											"}",
											"if (jsonData.tokens && jsonData.tokens.refresh) {",
											"    pm.environment.set(\"refresh_token\", jsonData.tokens.refresh);",
											"}",
											"if (jsonData.user && jsonData.user.id) {",
											"    pm.environment.set(\"user_id\", jsonData.user.id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{customer_email}}\",\n    \"password\": \"{{customer_password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/auth/login/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"auth",
										"login",
										""
									]
								},
								"description": "Logs in an existing user and returns user details along with access and refresh tokens.\n\n**Permissions:** Anonymous User"
							},
							"response": [
								{
									"name": "Success - Login Successful (200 OK)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{customer_email}}\",\n    \"password\": \"{{customer_password}}\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/login/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"login",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"user\": {\n        \"id\": \"usr_01H...\",\n        \"username\": \"testuser\",\n        \"email\": \"user@example.com\",\n        \"phone_number\": \"1234567890\",\n        \"first_name\": \"Test\",\n        \"last_name\": \"User\",\n        \"user_type\": \"customer\",\n        \"profile_picture\": null,\n        \"bio\": null,\n        \"location\": null,\n        \"is_verified\": false,\n        \"rating\": 0.0,\n        \"balance\": \"0.00\",\n        \"created_at\": \"2023-10-27T10:00:00Z\",\n        \"updated_at\": \"2023-10-27T10:00:00Z\"\n    },\n    \"tokens\": {\n        \"refresh\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n        \"access\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n    },\n    \"message\": \"Login successful\"\n}"
								},
								{
									"name": "Error - Missing Fields (400 Bad Request)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"\",\n    \"password\": \"\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/login/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"login",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"email\": [\n        \"This field is required.\"\n    ],\n    \"password\": [\n        \"This field is required.\"\n    ]\n}"
								},
								{
									"name": "Error - Invalid Credentials (401 Unauthorized)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"wrong@example.com\",\n    \"password\": \"wrongpassword\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/login/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"login",
												""
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Invalid credentials\"\n}"
								}
							]
						},
						{
							"name": "Customer Login",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{customer_email}}\",\n    \"password\": \"{{customer_password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/auth/customer/login/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"auth",
										"customer",
										"login",
										""
									]
								},
								"description": "Authenticates a user specifically as a 'customer'.\n\n**Permissions:** Anonymous User"
							},
							"response": [
								{
									"name": "Success - Customer Login (200 OK)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{customer_email}}\",\n    \"password\": \"{{customer_password}}\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/customer/login/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"customer",
												"login",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"user\": {\n        \"id\": \"usr_01H...\",\n        \"username\": \"logincustomer\",\n        \"email\": \"customer@example.com\",\n        \"phone_number\": \"1234567890\",\n        \"first_name\": \"Login\",\n        \"last_name\": \"Customer\",\n        \"user_type\": \"customer\",\n        \"profile_picture\": null,\n        \"bio\": null,\n        \"location\": null,\n        \"is_verified\": false,\n        \"rating\": 0.0,\n        \"balance\": \"0.00\",\n        \"created_at\": \"2023-10-27T10:00:00Z\",\n        \"updated_at\": \"2023-10-27T10:00:00Z\"\n    },\n    \"tokens\": {\n        \"refresh\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n        \"access\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n    },\n    \"message\": \"customer login successful\"\n}"
								},
								{
									"name": "Error - Not a Customer (400 Bad Request)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"notacustomer@example.com\",\n    \"password\": \"password123\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/customer/login/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"customer",
												"login",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"User is not registered as a customer\"\n}"
								},
								{
									"name": "Error - Invalid Credentials (401 Unauthorized)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"customer@example.com\",\n    \"password\": \"wrongpassword\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/customer/login/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"customer",
												"login",
												""
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Invalid credentials\"\n}"
								},
								{
									"name": "Error - Missing Fields (400 Bad Request)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"\",\n    \"password\": \"\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/customer/login/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"customer",
												"login",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"email\": [\n        \"This field is required.\"\n    ],\n    \"password\": [\n        \"This field is required.\"\n    ]\n}"
								}
							]
						},
						{
							"name": "Provider Login",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{provider_email}}\",\n    \"password\": \"{{provider_password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/auth/provider/login/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"auth",
										"provider",
										"login",
										""
									]
								},
								"description": "Authenticates a user specifically as a 'provider'.\n\n**Permissions:** Anonymous User"
							},
							"response": [
								{
									"name": "Success - Provider Login (200 OK)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{provider_email}}\",\n    \"password\": \"{{provider_password}}\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/provider/login/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"provider",
												"login",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"user\": {\n        \"id\": \"usr_01H...\",\n        \"username\": \"loginprovider\",\n        \"email\": \"provider@example.com\",\n        \"phone_number\": \"0987654321\",\n        \"first_name\": \"Login\",\n        \"last_name\": \"Provider\",\n        \"user_type\": \"provider\",\n        \"profile_picture\": null,\n        \"bio\": null,\n        \"location\": null,\n        \"is_verified\": false,\n        \"rating\": 0.0,\n        \"balance\": \"0.00\",\n        \"created_at\": \"2023-10-27T10:00:00Z\",\n        \"updated_at\": \"2023-10-27T10:00:00Z\"\n    },\n    \"tokens\": {\n        \"refresh\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n        \"access\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n    },\n    \"message\": \"provider login successful\"\n}"
								},
								{
									"name": "Error - Not a Provider (400 Bad Request)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"notaprovider@example.com\",\n    \"password\": \"password123\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/provider/login/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"provider",
												"login",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"User is not registered as a provider\"\n}"
								},
								{
									"name": "Error - Invalid Credentials (401 Unauthorized)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"provider@example.com\",\n    \"password\": \"wrongpassword\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/provider/login/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"provider",
												"login",
												""
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Invalid credentials\"\n}"
								},
								{
									"name": "Error - Missing Fields (400 Bad Request)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"\",\n    \"password\": \"\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/provider/login/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"provider",
												"login",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"email\": [\n        \"This field is required.\"\n    ],\n    \"password\": [\n        \"This field is required.\"\n    ]\n}"
								}
							]
						},
						{
							"name": "Admin Login",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{admin_email}}\",\n    \"password\": \"{{admin_password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/auth/admin/login/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"auth",
										"admin",
										"login",
										""
									]
								},
								"description": "Authenticates a user specifically as an 'admin'.\n\n**Permissions:** Anonymous User"
							},
							"response": [
								{
									"name": "Success - Admin Login (200 OK)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{admin_email}}\",\n    \"password\": \"{{admin_password}}\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/admin/login/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"admin",
												"login",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"user\": {\n        \"id\": \"usr_01H...\",\n        \"username\": \"loginadmin\",\n        \"email\": \"admin@example.com\",\n        \"phone_number\": \"1122334455\",\n        \"first_name\": \"Login\",\n        \"last_name\": \"Admin\",\n        \"user_type\": \"admin\",\n        \"profile_picture\": null,\n        \"bio\": null,\n        \"location\": null,\n        \"is_verified\": true,\n        \"rating\": 0.0,\n        \"balance\": \"0.00\",\n        \"created_at\": \"2023-10-27T10:00:00Z\",\n        \"updated_at\": \"2023-10-27T10:00:00Z\"\n    },\n    \"tokens\": {\n        \"refresh\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n        \"access\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n    },\n    \"message\": \"admin login successful\"\n}"
								},
								{
									"name": "Error - Not an Admin (400 Bad Request)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"notanadmin@example.com\",\n    \"password\": \"password123\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/admin/login/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"admin",
												"login",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"User is not registered as an admin\"\n}"
								},
								{
									"name": "Error - Invalid Credentials (401 Unauthorized)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"admin@example.com\",\n    \"password\": \"wrongpassword\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/admin/login/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"admin",
												"login",
												""
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Invalid credentials\"\n}"
								},
								{
									"name": "Error - Missing Fields (400 Bad Request)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"\",\n    \"password\": \"\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/admin/login/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"admin",
												"login",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"email\": [\n        \"This field is required.\"\n    ],\n    \"password\": [\n        \"This field is required.\"\n    ]\n}"
								}
							]
						}
					],
					"description": "Endpoint for user login."
				},
				{
					"name": "Refresh Access Token",
					"item": [
						{
							"name": "Refresh JWT Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"if (jsonData.access) {",
											"    pm.environment.set(\"access_token\", jsonData.access);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"refresh\": \"{{refresh_token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/auth/token/refresh/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"auth",
										"token",
										"refresh",
										""
									]
								},
								"description": "Refreshes an expired JWT access token using a valid refresh token.\n\n**Permissions:** Anonymous User (requires valid refresh token)"
							},
							"response": [
								{
									"name": "Success - Access Token Refreshed (200 OK)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"refresh\": \"{{refresh_token}}\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/token/refresh/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"token",
												"refresh",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"access\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzAwMDAwMzAwLCJqdGkiOiIuLi5uZXdBY2Nlc3NRaSIsInVzZXJfaWQiOjF9LmFub3RoZXJTaWduYXR1cmU\"\n}"
								},
								{
									"name": "Error - Token Invalid/Expired (401 Unauthorized)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"refresh\": \"{{refresh_token}}\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/token/refresh/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"token",
												"refresh",
												""
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Token is invalid or expired\",\n    \"code\": \"token_not_valid\"\n}"
								}
							]
						}
					],
					"description": "Endpoint for refreshing JWT access tokens."
				},
				{
					"name": "User Logout",
					"item": [
						{
							"name": "User Logout",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"description": "Access token for authentication.",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"refresh_token\": \"{{refresh_token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/auth/logout/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"auth",
										"logout",
										""
									]
								},
								"description": "Logs out the current user by blacklisting their refresh token. Requires a valid access token for authorization and the refresh token in the body to be blacklisted.\n\n**Permissions:** Authenticated User"
							},
							"response": [
								{
									"name": "Success - Logout Successful (200 OK)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"refresh_token\": \"{{refresh_token}}\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/logout/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"logout",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Successfully logged out.\"\n}"
								},
								{
									"name": "Error - Missing Refresh Token (400 Bad Request)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"refresh_token\": \"{{refresh_token}}\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/logout/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"logout",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Refresh token not provided.\"\n}"
								},
								{
									"name": "Error - Unauthorized (401)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer invalid_token"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"refresh_token\": \"{{refresh_token}}\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/auth/logout/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"auth",
												"logout",
												""
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
								}
							]
						}
					],
					"description": "Endpoint for user logout."
				},
				{
					"name": "Access Token Management",
					"item": [
						{
							"name": "List User Access Tokens",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"description": "Access token for authentication.",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/users/me/tokens/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"users",
										"me",
										"tokens",
										""
									],
									"query": [
										{
											"key": "active_only",
											"value": "true",
											"description": "If true, only returns active tokens",
											"disabled": true
										}
									]
								},
								"description": "Returns a list of all access tokens associated with the current user, including device type, creation time, and last refresh time.\n\n**Permissions:** `IsAuthenticated`\n\n**Query Parameters:**\n- `active_only` (boolean, optional): If `true`, only returns active tokens (e.g., `?active_only=true`)"
							},
							"response": [
								{
									"name": "Success - List Access Tokens (200 OK)",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"description": "Access token for authentication.",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/me/tokens/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"me",
												"tokens",
												""
											],
											"query": [
												{
													"key": "active_only",
													"value": "true",
													"description": "If true, only returns active tokens",
													"disabled": true
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"count\": 2,\n    \"results\": [\n        {\n            \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n            \"user\": \"username\",\n            \"device_type\": \"web\",\n            \"device_type_display\": \"Web Browser\",\n            \"device_name\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\",\n            \"ip_address\": \"192.168.1.1\",\n            \"created_at\": \"2023-06-01T00:30:45.123456Z\",\n            \"last_used_at\": \"2023-06-01T00:30:45.123456Z\",\n            \"last_refreshed_at\": \"2023-06-01T00:30:45.123456Z\",\n            \"is_active\": true\n        },\n        {\n            \"id\": \"550e8400-e29b-41d4-a716-446655440001\",\n            \"user\": \"username\",\n            \"device_type\": \"mobile\",\n            \"device_type_display\": \"Mobile App\",\n            \"device_name\": \"Prbal-App/1.0\",\n            \"ip_address\": \"192.168.1.2\",\n            \"created_at\": \"2023-05-29T15:45:30.123456Z\",\n            \"last_used_at\": \"2023-05-29T15:45:30.123456Z\",\n            \"last_refreshed_at\": \"2023-05-29T15:45:30.123456Z\",\n            \"is_active\": true\n        }\n    ]\n}"
								},
								{
									"name": "Error - Unauthorized (401)",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer invalid_token",
												"description": "Access token for authentication.",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/me/tokens/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"me",
												"tokens",
												""
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
								}
							]
						},
						{
							"name": "Revoke a Specific Access Token",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"description": "Access token for authentication.",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/users/me/tokens/{{token_id}}/revoke/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"users",
										"me",
										"tokens",
										"{{token_id}}",
										"revoke",
										""
									]
								},
								"description": "Revokes (deactivates) a specific access token. This prevents the token from being used for authentication.\n\n**Permissions:** `IsAuthenticated`\n\n**Path Parameters:**\n- `token_id` (UUID, required): The ID of the access token to revoke."
							},
							"response": [
								{
									"name": "Success - Token Revoked (200 OK)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"description": "Access token for authentication.",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/me/tokens/550e8400-e29b-41d4-a716-446655440000/revoke/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"me",
												"tokens",
												"550e8400-e29b-41d4-a716-446655440000",
												"revoke",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Token revoked successfully\",\n    \"token_id\": \"550e8400-e29b-41d4-a716-446655440000\"\n}"
								},
								{
									"name": "Error - Token Not Found or Already Revoked (404 Not Found)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"description": "Access token for authentication.",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/me/tokens/550e8400-e29b-41d4-a716-invalid/revoke/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"me",
												"tokens",
												"550e8400-e29b-41d4-a716-invalid",
												"revoke",
												""
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Not found.\"\n}"
								},
								{
									"name": "Error - Unauthorized (401)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer invalid_token",
												"description": "Access token for authentication.",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/me/tokens/550e8400-e29b-41d4-a716-446655440000/revoke/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"me",
												"tokens",
												"550e8400-e29b-41d4-a716-446655440000",
												"revoke",
												""
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
								}
							]
						}
					],
					"description": "Endpoints for managing user access tokens."
				}
			],
			"description": "User registration, login, and token management."
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "Generic User Endpoints (Me)",
					"item": [
						{
							"name": "Retrieve My Profile",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"description": "Access token for authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/users/me/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"users",
										"me",
										""
									]
								},
								"description": "Retrieves the profile details of the currently authenticated user.\n\n**Permissions:** Authenticated User"
							},
							"response": [
								{
									"name": "Success - My Profile Retrieved (200 OK)",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"me",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"usr_01HSAMPLEUSERID\",\n    \"username\": \"genericuser\",\n    \"email\": \"user@example.com\",\n    \"phone_number\": \"1234567890\",\n    \"first_name\": \"Generic\",\n    \"last_name\": \"User\",\n    \"user_type\": \"customer\", \n    \"profile_picture\": \"https://example.com/path/to/profile.jpg\",\n    \"bio\": \"Just a regular user of the platform.\",\n    \"location\": \"Anytown, USA\",\n    \"is_verified\": false,\n    \"rating\": 0.0,\n    \"balance\": \"0.00\",\n    \"created_at\": \"2023-05-10T10:00:00Z\",\n    \"updated_at\": \"2023-08-15T14:30:00Z\"\n}"
								},
								{
									"name": "Error - Unauthorized (401)",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer invalid_token",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"me",
												""
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
								}
							]
						},
						{
							"name": "Update My Profile (PUT)",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"description": "Access token for authentication.",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "genericuser_updated",
											"type": "text"
										},
										{
											"key": "phone_number",
											"value": "0987654321",
											"type": "text"
										},
										{
											"key": "first_name",
											"value": "Generic",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "Updated",
											"type": "text"
										},
										{
											"key": "profile_picture",
											"type": "file",
											"src": "/path/to/your/profile.jpg"
										},
										{
											"key": "bio",
											"value": "An updated bio for this user.",
											"type": "text"
										},
										{
											"key": "location",
											"value": "New City, USA",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/users/me/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"users",
										"me",
										""
									]
								},
								"description": "Updates the entire profile for the currently authenticated user. All writable fields must be provided.\n\n**Permissions:** Authenticated User\n\n**Note on `profile_picture`**: This field expects a file. It is highly recommended to first upload the image using the `POST {{base_url}}/api/{{api_version}}/users/profile/image/` endpoint and then use the returned URL here."
							},
							"response": [
								{
									"name": "Success - My Profile Updated (200 OK)",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "multipart/form-data",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "genericuser_updated",
													"type": "text"
												},
												{
													"key": "phone_number",
													"value": "0987654321",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "Generic",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "Updated",
													"type": "text"
												},
												{
													"key": "profile_picture",
													"type": "file",
													"src": "/path/to/your/profile.jpg"
												},
												{
													"key": "bio",
													"value": "An updated bio for this user.",
													"type": "text"
												},
												{
													"key": "location",
													"value": "New City, USA",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"me",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"usr_01HSAMPLEUSERID\",\n    \"username\": \"genericuser_updated\",\n    \"email\": \"user@example.com\", \n    \"phone_number\": \"0987654321\",\n    \"first_name\": \"Generic\",\n    \"last_name\": \"Updated\",\n    \"user_type\": \"customer\", \n    \"profile_picture\": \"https://example.com/path/to/new_profile.jpg\",\n    \"bio\": \"An updated bio for this user.\",\n    \"location\": \"New City, USA\",\n    \"is_verified\": false, \n    \"rating\": 0.0, \n    \"balance\": \"0.00\", \n    \"created_at\": \"2023-05-10T10:00:00Z\",\n    \"updated_at\": \"2023-10-30T11:00:00Z\" \n}"
								},
								{
									"name": "Error - Validation Error (400 Bad Request)",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "multipart/form-data",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "existinguser",
													"type": "text"
												},
												{
													"key": "phone_number",
													"value": "existingphone",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "Generic",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "Updated",
													"type": "text"
												},
												{
													"key": "bio",
													"value": "An updated bio.",
													"type": "text"
												},
												{
													"key": "location",
													"value": "New City, USA",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"me",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"username\": [\n        \"A user with that username already exists.\"\n    ],\n    \"phone_number\": [\n        \"A user with that phone number already exists.\"\n    ]\n}"
								},
								{
									"name": "Error - Unauthorized (401)",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer invalid_token",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "multipart/form-data",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "genericuser_updated",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"me",
												""
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
								}
							]
						},
						{
							"name": "Partially Update My Profile (PATCH)",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"description": "Access token for authentication.",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "bio",
											"value": "A new, more concise bio.",
											"type": "text"
										},
										{
											"key": "location",
											"value": "Updated City, USA",
											"type": "text"
										},
										{
											"key": "profile_picture",
											"type": "file",
											"src": "/path/to/your/profile.jpg"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/users/me/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"users",
										"me",
										""
									]
								},
								"description": "Partially updates the profile for the currently authenticated user. Only include the fields to be changed.\n\n**Permissions:** Authenticated User\n\n**Note on `profile_picture`**: If included, this field expects a file upload. Use form-data to upload a file directly with this request."
							},
							"response": [
								{
									"name": "Success - My Profile Partially Updated (200 OK)",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "multipart/form-data",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "bio",
													"value": "A new, more concise bio.",
													"type": "text"
												},
												{
													"key": "location",
													"value": "Updated City, USA",
													"type": "text"
												},
												{
													"key": "profile_picture",
													"type": "file",
													"src": "/path/to/your/profile.jpg"
												}
											]
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"me",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"usr_01HSAMPLEUSERID\",\n    \"username\": \"genericuser_updated\", \n    \"email\": \"user@example.com\",\n    \"phone_number\": \"0987654321\", \n    \"first_name\": \"Generic\", \n    \"last_name\": \"Updated\", \n    \"user_type\": \"customer\",\n    \"profile_picture\": \"https://example.com/path/to/new_profile.jpg\", \n    \"bio\": \"A new, more concise bio.\",\n    \"location\": \"Updated City, USA\",\n    \"is_verified\": false,\n    \"rating\": 0.0,\n    \"balance\": \"0.00\",\n    \"created_at\": \"2023-05-10T10:00:00Z\",\n    \"updated_at\": \"2023-10-30T12:00:00Z\"\n}"
								},
								{
									"name": "Error - Validation Error (400 Bad Request)",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"existinguser\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"me",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"username\": [\n        \"A user with that username already exists.\"\n    ]\n}"
								},
								{
									"name": "Error - Unauthorized (401)",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer invalid_token",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"bio\": \"Trying to update bio without auth.\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"me",
												""
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
								}
							]
						},
						{
							"name": "Upload User Avatar",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"description": "Access token for authentication.",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "profile_picture",
											"description": "Image file for the user avatar (e.g., JPG, PNG).",
											"type": "file",
											"src": "/path/to/your/image.jpg"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/users/me/avatar/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"users",
										"me",
										"avatar",
										""
									]
								},
								"description": "Uploads or updates the avatar for the currently authenticated user. The previous avatar, if any, might be replaced.\n\n**Permissions:** Authenticated User\n\n**Request Body:** `multipart/form-data` with `avatar` field (image file)."
							},
							"response": [
								{
									"name": "Success - Avatar Uploaded (200 OK)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "avatar",
													"value": "",
													"type": "file"
												}
											]
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/me/avatar/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"me",
												"avatar",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"usr_01HABC...\",\n    \"username\": \"testuser\",\n    \"email\": \"testuser@example.com\",\n    \"phone_number\": \"+15551234567\",\n    \"first_name\": \"Test\",\n    \"last_name\": \"User\",\n    \"user_type\": \"customer\",\n    \"profile_picture\": \"{{base_url}}/media/avatars/usr_01HABC.../new_avatar_after_upload.jpg\",\n    \"bio\": \"Loves coding and coffee.\",\n    \"location\": \"San Francisco, CA\",\n    \"is_verified\": true,\n    \"rating\": 4.5,\n    \"balance\": \"100.00\",\n    \"created_at\": \"2023-10-27T10:20:00Z\",\n    \"updated_at\": \"2023-10-28T12:10:00Z\"\n}"
								},
								{
									"name": "Error - Validation Error (400 Bad Request)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/me/avatar/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"me",
												"avatar",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"avatar\": [\n        \"No file was submitted.\",\n        \"Upload a valid image. The file you uploaded was either not an image or a corrupted image.\"\n    ]\n}"
								},
								{
									"name": "Error - Unauthorized (401)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer invalid_token",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "avatar",
													"value": "",
													"type": "file"
												}
											]
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/me/avatar/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"me",
												"avatar",
												""
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
								}
							]
						},
						{
							"name": "Deactivate Own Account",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"description": "Access token for authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/users/me/deactivate/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"users",
										"me",
										"deactivate",
										""
									]
								},
								"description": "Allows the currently authenticated user to deactivate their own account. The user's `is_active` flag will be set to `false`.\n\n**Permissions:** Authenticated User"
							},
							"response": [
								{
									"name": "Success - Account Deactivated (200 OK)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/me/deactivate/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"me",
												"deactivate",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Account deactivated successfully.\"\n}"
								},
								{
									"name": "Error - Already Deactivated (400 Bad Request)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/me/deactivate/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"me",
												"deactivate",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Account is already deactivated.\"\n}"
								},
								{
									"name": "Error - Unauthorized (401)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer invalid_token",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/me/deactivate/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"me",
												"deactivate",
												""
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
								}
							]
						}
					],
					"description": "Endpoints for the authenticated user to manage their own profile (/api/{{api_version}}/users/me/)."
				},
				{
					"name": "General User Actions",
					"item": [
						{
							"name": "Retrieve Public User Profile",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/users/:user_id/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"users",
										":user_id",
										""
									],
									"variable": [
										{
											"key": "user_id",
											"value": "1c946756-ba30-4aaa-96fd-1d7d07517bc4",
											"description": "The ID of the user whose profile is to be retrieved."
										}
									]
								},
								"description": "Retrieves the public-facing profile information for a specific user by their ID. This data is typically what other users are allowed to see.\n\n**Permissions:** Allow Any\n\n**Path Parameters:**\n- `user_id` (UUID, required): The ID of the user whose profile is to be retrieved."
							},
							"response": [
								{
									"name": "Success - Public Profile Retrieved (200 OK)",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/usr_01HXXXXXXXXXXXXXEXAMPLE/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"usr_01HXXXXXXXXXXXXXEXAMPLE",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"usr_01HXXXXXXXXXXXXXEXAMPLE\",\n    \"username\": \"publicuser\",\n    \"first_name\": \"Public\",\n    \"last_name\": \"User\",\n    \"profile_picture\": \"https://example.com/path/to/image.jpg\",\n    \"bio\": \"This is a public bio.\",\n    \"location\": \"Public City\",\n    \"user_type\": \"customer\",\n    \"is_verified\": true,\n    \"rating\": 4.5,\n    \"created_at\": \"2023-01-15T10:00:00Z\"\n}"
								},
								{
									"name": "Error - Not Found (404)",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/usr_nonexistentuser/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"usr_nonexistentuser",
												""
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Not found.\"\n}"
								}
							]
						},
						{
							"name": "Like a User's Profile",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"description": "Access token for authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/users/:user_id/like/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"users",
										":user_id",
										"like",
										""
									],
									"variable": [
										{
											"key": "user_id",
											"value": "1c946756-ba30-4aaa-96fd-1d7d07517bc4",
											"description": "The ID of the user profile to like."
										}
									]
								},
								"description": "Allows the authenticated user to \"like\" another user's profile. This action is typically part of a matching or social interaction system.\n\n**Permissions:** Authenticated User\n\n**Path Parameters:**\n- `user_id` (UUID, required): The ID of the user profile to like.\n\n**Request Body:** Empty."
							},
							"response": [
								{
									"name": "Success - Profile Liked (200 OK)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/usr_01HZZZZZZZZZZZZZZEXAMPLE/like/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"usr_01HZZZZZZZZZZZZZZEXAMPLE",
												"like",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": \"liked\", \n    \"message\": \"Profile liked successfully.\"\n}"
								},
								{
									"name": "Error - Not Found (404)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/usr_nonexistentuser/like/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"usr_nonexistentuser",
												"like",
												""
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"User profile not found.\"\n}"
								},
								{
									"name": "Error - Bad Request (e.g., Already Liked) (400)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/usr_01HZZZZZZZZZZZZZZEXAMPLE/like/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"usr_01HZZZZZZZZZZZZZZEXAMPLE",
												"like",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"You have already liked this profile.\"\n}"
								},
								{
									"name": "Error - Unauthorized (401)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer invalid_token",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/usr_01HZZZZZZZZZZZZZZEXAMPLE/like/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"usr_01HZZZZZZZZZZZZZZEXAMPLE",
												"like",
												""
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
								}
							]
						},
						{
							"name": "Pass on a User's Profile",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"description": "Access token for authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/users/:user_id/pass/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"users",
										":user_id",
										"pass",
										""
									],
									"variable": [
										{
											"key": "user_id",
											"value": "1c946756-ba30-4aaa-96fd-1d7d07517bc4",
											"description": "The ID of the user profile to pass on."
										}
									]
								},
								"description": "Allows the authenticated user to \"pass\" on another user's profile, indicating no interest. This is often used in swipe-based matching systems.\n\n**Permissions:** Authenticated User\n\n**Path Parameters:**\n- `user_id` (UUID, required): The ID of the user profile to pass on.\n\n**Request Body:** Empty."
							},
							"response": [
								{
									"name": "Success - Profile Passed (200 OK)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/usr_01HWWWWWWWWWWWWWWEXAMPLE/pass/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"usr_01HWWWWWWWWWWWWWWEXAMPLE",
												"pass",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": \"passed\",\n    \"message\": \"Profile passed successfully.\"\n}"
								},
								{
									"name": "Error - Not Found (404)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/usr_nonexistentuser/pass/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"usr_nonexistentuser",
												"pass",
												""
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"User profile not found.\"\n}"
								},
								{
									"name": "Error - Bad Request (e.g., Cannot Pass Own Profile) (400)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/usr_01HWWWWWWWWWWWWWWEXAMPLE/pass/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"usr_01HWWWWWWWWWWWWWWEXAMPLE",
												"pass",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"You cannot pass on your own profile.\"\n}"
								},
								{
									"name": "Error - Unauthorized (401)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer invalid_token",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/usr_01HWWWWWWWWWWWWWWEXAMPLE/pass/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"usr_01HWWWWWWWWWWWWWWEXAMPLE",
												"pass",
												""
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
								}
							]
						},
						{
							"name": "Submit User Verification Details",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"description": "Access token for authentication.",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "document_type",
											"value": "passport",
											"type": "text"
										},
										{
											"key": "document_number",
											"value": "A12345678",
											"type": "text"
										},
										{
											"key": "issue_date",
											"value": "2020-01-15",
											"type": "text"
										},
										{
											"key": "expiry_date",
											"value": "2030-01-14",
											"type": "text"
										},
										{
											"key": "country_of_issue",
											"value": "US",
											"type": "text"
										},
										{
											"key": "verification_notes",
											"value": "Please verify my identity for full platform access.",
											"type": "text"
										},
										{
											"key": "document_link",
											"type": "file",
											"src": "/D:/New folder/16_03_23-31_03_23.docx"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/users/verify/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"users",
										"verify",
										""
									]
								},
								"description": "Allows an authenticated user to submit their verification details (e.g., ID documents, specific information required by the platform) to initiate or update their verification status. Users can now include a document link to reference external verification documents.\n\n**Permissions:** Authenticated User\n\n**Request Body (Form-Data):**\nThe following fields can be submitted as form-data:\n- document_type: \"passport\"\n- document_number: \"A12345678\"\n- issue_date: \"2020-01-15\"\n- expiry_date: \"2030-01-14\"\n- country_of_issue: \"US\"\n- verification_notes: \"Please verify my identity for full platform access.\"\n- document_link: [Select a file from your local system]\"\n\nUsing form-data allows for easier file uploads and document references."
							},
							"response": [
								{
									"name": "Success - Verification Submitted (202 Accepted)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "multipart/form-data",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "document_type",
													"value": "passport",
													"type": "text"
												},
												{
													"key": "document_number",
													"value": "A12345678",
													"type": "text"
												},
												{
													"key": "issue_date",
													"value": "2020-01-15",
													"type": "text"
												},
												{
													"key": "country_of_issue",
													"value": "US",
													"type": "text"
												},
												{
													"key": "document_link",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/verify/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"verify",
												""
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": \"pending_review\", \n    \"message\": \"Verification submission received. Your details are under review.\",\n    \"verification_id\": \"ver_01HXABCDEFGH12345EXAMPLE\" \n}"
								},
								{
									"name": "Error - Validation Error (400 Bad Request)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"document_type\": \"invalid_type\",\n    \"issue_date\": \"not-a-date\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/verify/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"verify",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"document_number\": [\"This field may not be blank.\"],\n    \"document_type\": [\"Invalid document type specified. Valid choices are: passport, license, national_id.\"],\n    \"issue_date\": [\"Date has wrong format. Use one of these formats instead: YYYY-MM-DD.\"]\n}"
								},
								{
									"name": "Error - Unauthorized (401)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer invalid_token",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"document_type\": \"passport\",\n    \"document_number\": \"A12345678\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/verify/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"verify",
												""
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
								}
							]
						}
					],
					"description": "General actions related to user profiles and interactions, typically involving other users or system-wide user processes (e.g., viewing public profiles, liking, verification). Base path: /api/{{api_version}}/users/"
				},
				{
					"name": "Customer Specific Endpoints (Me)",
					"item": [
						{
							"name": "Retrieve Customer Profile",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"description": "Access token for authentication (Customer specific).",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/users/customer/me/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"users",
										"customer",
										"me",
										""
									]
								},
								"description": "Retrieves the complete profile of the currently authenticated customer.\n\n**Permissions:** Authenticated Customer (`IsAuthenticated`, `IsCustomer`)"
							},
							"response": [
								{
									"name": "Success - Customer Profile Retrieved (200 OK)",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/customer/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"customer",
												"me",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"usr_01H CUSTOMERID SAMPLE\",\n    \"username\": \"customer_user\",\n    \"email\": \"customer@example.com\",\n    \"phone_number\": \"+12345678901\",\n    \"first_name\": \"Customer\",\n    \"last_name\": \"User\",\n    \"user_type\": \"customer\",\n    \"profile_picture\": \"{{base_url}}/media/profile_pictures/customer_user.jpg\",\n    \"bio\": \"I am a valued customer.\",\n    \"location\": \"Customer City, CS\",\n    \"is_verified\": true,\n    \"rating\": null,\n    \"balance\": \"0.00\",\n    \"created_at\": \"2023-10-26T10:00:00Z\",\n    \"updated_at\": \"2023-10-27T11:30:00Z\"\n}"
								},
								{
									"name": "Error - Unauthorized (401)",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer invalid_token",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/customer/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"customer",
												"me",
												""
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
								},
								{
									"name": "Error - Forbidden (e.g., Provider Token Used) (403)",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{provider_access_token_example}}",
												"description": "Example using a provider token which should be forbidden.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/customer/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"customer",
												"me",
												""
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"You do not have permission to perform this action.\"\n}"
								}
							]
						},
						{
							"name": "Update Customer Profile (Full Update)",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"description": "Access token for authentication (Customer specific).",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"updated_customer_user\",\n    \"phone_number\": \"+19876543210\",\n    \"first_name\": \"UpdatedCustomer\",\n    \"last_name\": \"UpdatedUser\",\n    \"profile_picture\": \"{{base_url}}/media/profile_pictures/new_customer_pic.jpg\",\n    \"bio\": \"An updated bio for the customer.\",\n    \"location\": \"New Customer City, NC\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/users/customer/me/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"users",
										"customer",
										"me",
										""
									]
								},
								"description": "Updates the entire profile of the currently authenticated customer. All writable fields should be provided. Fields not included might be set to null or default if the serializer/model allows.\n\n**Permissions:** Authenticated Customer (`IsAuthenticated`, `IsCustomer`)\n\n**Note on `profile_picture`**: This field expects a URL string. It is highly recommended to first upload the image using the `POST {{base_url}}/api/{{api_version}}/users/profile/image/` endpoint and then use the returned URL here."
							},
							"response": [
								{
									"name": "Success - Customer Profile Updated (200 OK)",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"updated_customer_user\",\n    \"phone_number\": \"+19876543210\",\n    \"first_name\": \"UpdatedCustomer\",\n    \"last_name\": \"UpdatedUser\",\n    \"profile_picture\": \"{{base_url}}/media/profile_pictures/new_customer_pic.jpg\",\n    \"bio\": \"An updated bio for the customer.\",\n    \"location\": \"New Customer City, NC\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/customer/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"customer",
												"me",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"usr_01H CUSTOMERID SAMPLE\",\n    \"username\": \"updated_customer_user\",\n    \"email\": \"customer@example.com\",\n    \"phone_number\": \"+19876543210\",\n    \"first_name\": \"UpdatedCustomer\",\n    \"last_name\": \"UpdatedUser\",\n    \"user_type\": \"customer\",\n    \"profile_picture\": \"{{base_url}}/media/profile_pictures/new_customer_pic.jpg\",\n    \"bio\": \"An updated bio for the customer.\",\n    \"location\": \"New Customer City, NC\",\n    \"is_verified\": true,\n    \"rating\": null,\n    \"balance\": \"0.00\",\n    \"created_at\": \"2023-10-26T10:00:00Z\",\n    \"updated_at\": \"2023-10-28T12:00:00Z\"\n}"
								},
								{
									"name": "Error - Validation Error (400 Bad Request)",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"existing_user\",\n    \"phone_number\": \"invalid-phone\",\n    \"first_name\": \"\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/customer/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"customer",
												"me",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"username\": [\"A user with that username already exists.\"],\n    \"phone_number\": [\"The phone number has an invalid format.\"],\n    \"first_name\": [\"This field may not be blank.\"]\n}"
								},
								{
									"name": "Error - Unauthorized (401)",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer invalid_token",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"first_name\": \"AnyName\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/customer/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"customer",
												"me",
												""
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
								}
							]
						},
						{
							"name": "Partially Update Customer Profile",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"description": "Access token for authentication (Customer specific).",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"bio\": \"A new concise bio.\",\n    \"location\": \"Remote\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/users/customer/me/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"users",
										"customer",
										"me",
										""
									]
								},
								"description": "Partially updates the profile of the currently authenticated customer. Only include the fields you want to change.\n\n**Permissions:** Authenticated Customer (`IsAuthenticated`, `IsCustomer`)\n\n**Note on `profile_picture` (if included)**: This field expects a URL string. It is highly recommended to first upload the image using the `POST {{base_url}}/api/{{api_version}}/users/profile/image/` endpoint and then use the returned URL here."
							},
							"response": [
								{
									"name": "Success - Customer Profile Partially Updated (200 OK)",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"bio\": \"A new concise bio.\",\n    \"location\": \"Remote\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/customer/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"customer",
												"me",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"usr_01H CUSTOMERID SAMPLE\",\n    \"username\": \"updated_customer_user\",\n    \"email\": \"customer@example.com\",\n    \"phone_number\": \"+19876543210\",\n    \"first_name\": \"UpdatedCustomer\",\n    \"last_name\": \"UpdatedUser\",\n    \"user_type\": \"customer\",\n    \"profile_picture\": \"{{base_url}}/media/profile_pictures/new_customer_pic.jpg\",\n    \"bio\": \"A new concise bio.\",\n    \"location\": \"Remote\",\n    \"is_verified\": true,\n    \"rating\": null,\n    \"balance\": \"0.00\",\n    \"created_at\": \"2023-10-26T10:00:00Z\",\n    \"updated_at\": \"2023-10-28T12:30:00Z\"\n}"
								},
								{
									"name": "Error - Validation Error (400 Bad Request)",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"another_existing_user\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/customer/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"customer",
												"me",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"username\": [\"A user with that username already exists.\"]\n}"
								},
								{
									"name": "Error - Unauthorized (401)",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer invalid_token",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"location\": \"Some Location\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/customer/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"customer",
												"me",
												""
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
								}
							]
						}
					],
					"description": "Endpoints specific to an authenticated customer for managing their own profile and related data. Base path: /api/{{api_version}}/users/customer/me/"
				},
				{
					"name": "Provider Specific Endpoints (Me)",
					"item": [
						{
							"name": "Retrieve Provider Profile",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"description": "Access token for authentication (Provider specific).",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/users/provider/me/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"users",
										"provider",
										"me",
										""
									]
								},
								"description": "Retrieves the profile details of the currently authenticated service provider.\n\n**Permissions:** Authenticated Provider (`IsAuthenticated`, `IsServiceProvider`)"
							},
							"response": [
								{
									"name": "Success - Provider Profile Retrieved (200 OK)",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/provider/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"provider",
												"me",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"usr_01HPROVIDERIDEXAMPLE\",\n    \"username\": \"provider_user\",\n    \"email\": \"provider@example.com\",\n    \"phone_number\": \"+11234567890\",\n    \"first_name\": \"Service\",\n    \"last_name\": \"Provider\",\n    \"user_type\": \"provider\",\n    \"profile_picture\": \"{{base_url}}/media/profile_pictures/provider_pic.jpg\",\n    \"bio\": \"Experienced and reliable service provider.\",\n    \"location\": \"San Francisco, CA\",\n    \"is_verified\": true,\n    \"rating\": \"4.75\",\n    \"balance\": \"250.00\",\n    \"created_at\": \"2023-01-15T10:00:00Z\",\n    \"updated_at\": \"2023-10-25T14:30:00Z\"\n}"
								},
								{
									"name": "Error - Unauthorized (401)",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer invalid_token",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/provider/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"provider",
												"me",
												""
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
								},
								{
									"name": "Error - Forbidden (User is not a provider) (403)",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{customer_access_token_example}}",
												"description": "Example using a customer token which should be forbidden.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/provider/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"provider",
												"me",
												""
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"You do not have permission to perform this action.\"\n}"
								}
							]
						},
						{
							"name": "Update Provider Profile (Full Update)",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"description": "Access token for authentication (Provider specific).",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"updated_provider_username\",\n    \"phone_number\": \"+19876543210\",\n    \"first_name\": \"UpdatedService\",\n    \"last_name\": \"ProviderName\",\n    \"profile_picture\": \"{{base_url}}/media/profile_pictures/new_provider_pic.jpg\",\n    \"bio\": \"Newly updated bio for the service provider.\",\n    \"location\": \"New York, NY\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/users/provider/me/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"users",
										"provider",
										"me",
										""
									]
								},
								"description": "Updates the entire profile of the currently authenticated service provider. All writable fields must be provided.\n\n**Permissions:** Authenticated Provider (`IsAuthenticated`, `IsServiceProvider`)\n\n**Note on `profile_picture`**: This field expects a URL string. It is recommended to first upload the image using the `POST {{base_url}}/api/{{api_version}}/users/me/avatar/` endpoint and then use the returned URL here."
							},
							"response": [
								{
									"name": "Success - Provider Profile Updated (200 OK)",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"updated_provider_username\",\n    \"phone_number\": \"+19876543210\",\n    \"first_name\": \"UpdatedService\",\n    \"last_name\": \"ProviderName\",\n    \"profile_picture\": \"{{base_url}}/media/profile_pictures/new_provider_pic.jpg\",\n    \"bio\": \"Newly updated bio for the service provider.\",\n    \"location\": \"New York, NY\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/provider/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"provider",
												"me",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"usr_01HPROVIDERIDEXAMPLE\",\n    \"username\": \"updated_provider_username\",\n    \"email\": \"provider@example.com\",\n    \"phone_number\": \"+19876543210\",\n    \"first_name\": \"UpdatedService\",\n    \"last_name\": \"ProviderName\",\n    \"user_type\": \"provider\",\n    \"profile_picture\": \"{{base_url}}/media/profile_pictures/new_provider_pic.jpg\",\n    \"bio\": \"Newly updated bio for the service provider.\",\n    \"location\": \"New York, NY\",\n    \"is_verified\": true,\n    \"rating\": \"4.75\",\n    \"balance\": \"250.00\",\n    \"created_at\": \"2023-01-15T10:00:00Z\",\n    \"updated_at\": \"2023-10-28T18:00:00Z\"\n}"
								},
								{
									"name": "Error - Validation Error (400 Bad Request)",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"existing_user\",\n    \"phone_number\": \"invalid-phone\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/provider/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"provider",
												"me",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"username\": [\"A user with that username already exists.\"],\n    \"phone_number\": [\"The phone number has an invalid format.\"]\n}"
								},
								{
									"name": "Error - Unauthorized (401)",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer invalid_token",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"first_name\": \"AnyName\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/provider/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"provider",
												"me",
												""
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
								}
							]
						},
						{
							"name": "Partially Update Provider Profile",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"description": "Access token for authentication (Provider specific).",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"bio\": \"A more concise and updated bio.\",\n    \"location\": \"Remote\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/users/provider/me/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"users",
										"provider",
										"me",
										""
									]
								},
								"description": "Partially updates the profile of the currently authenticated service provider. Only include the fields that need to be changed.\n\n**Permissions:** Authenticated Provider (`IsAuthenticated`, `IsServiceProvider`)\n\n**Note on `profile_picture` (if included)**: This field expects a URL string. It is recommended to first upload the image using the `POST {{base_url}}/api/{{api_version}}/users/me/avatar/` endpoint and then use the returned URL here."
							},
							"response": [
								{
									"name": "Success - Provider Profile Partially Updated (200 OK)",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"bio\": \"A more concise and updated bio.\",\n    \"location\": \"Remote\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/provider/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"provider",
												"me",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"usr_01HPROVIDERIDEXAMPLE\",\n    \"username\": \"provider_user\",\n    \"email\": \"provider@example.com\",\n    \"phone_number\": \"+11234567890\",\n    \"first_name\": \"Service\",\n    \"last_name\": \"Provider\",\n    \"user_type\": \"provider\",\n    \"profile_picture\": \"{{base_url}}/media/profile_pictures/provider_pic.jpg\",\n    \"bio\": \"A more concise and updated bio.\",\n    \"location\": \"Remote\",\n    \"is_verified\": true,\n    \"rating\": \"4.75\",\n    \"balance\": \"250.00\",\n    \"created_at\": \"2023-01-15T10:00:00Z\",\n    \"updated_at\": \"2023-10-28T19:00:00Z\"\n}"
								},
								{
									"name": "Error - Validation Error (400 Bad Request)",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"another_existing_provider_user\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/provider/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"provider",
												"me",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"username\": [\"A user with that username already exists.\"]\n}"
								},
								{
									"name": "Error - Unauthorized (401)",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer invalid_token",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"location\": \"Some New Location\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/provider/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"provider",
												"me",
												""
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
								}
							]
						}
					],
					"description": "Endpoints specific to an authenticated service provider for managing their own profile and related data. Base path: /api/{{api_version}}/users/provider/me/"
				},
				{
					"name": "Admin Specific Endpoints (Me)",
					"item": [
						{
							"name": "Retrieve Admin Profile",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"description": "Access token for authentication (Admin specific).",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/users/admin/me/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"users",
										"admin",
										"me",
										""
									]
								},
								"description": "Retrieves the profile of the currently authenticated admin user.\n\n**Permissions:** Authenticated Admin (`IsAuthenticated`, `IsAdminUser`)"
							},
							"response": [
								{
									"name": "Success - Admin Profile Retrieved (200 OK)",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{admin_access_token_example}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/admin/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"admin",
												"me",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"usr_01HADMINIDEXAMPLE\",\n    \"username\": \"admin_user\",\n    \"email\": \"admin@example.com\",\n    \"phone_number\": \"+15551234567\",\n    \"first_name\": \"Admin\",\n    \"last_name\": \"User\",\n    \"user_type\": \"admin\",\n    \"profile_picture\": \"{{base_url}}/media/profile_pictures/admin_default.png\",\n    \"bio\": \"Site administrator with full access privileges.\",\n    \"location\": \"Headquarters\",\n    \"is_staff\": true,\n    \"is_superuser\": true,\n    \"created_at\": \"2023-01-01T00:00:00Z\",\n    \"updated_at\": \"2023-10-01T10:00:00Z\"\n}"
								},
								{
									"name": "Error - Unauthorized (401)",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer invalid_token",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/admin/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"admin",
												"me",
												""
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
								},
								{
									"name": "Error - Forbidden (User is not an Admin) (403)",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{customer_access_token_example}}",
												"description": "Example using a customer token which should be forbidden.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/admin/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"admin",
												"me",
												""
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"You do not have permission to perform this action.\"\n}"
								}
							]
						},
						{
							"name": "Update Admin Profile (Full Update)",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"description": "Access token for authentication (Admin specific).",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"updated_admin_username\",\n    \"phone_number\": \"+15557654321\",\n    \"first_name\": \"UpdatedAdmin\",\n    \"last_name\": \"User\",\n    \"profile_picture\": \"{{base_url}}/media/profile_pictures/new_admin_pic.jpg\",\n    \"bio\": \"Updated bio for the site administrator.\",\n    \"location\": \"Remote Office\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/users/admin/me/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"users",
										"admin",
										"me",
										""
									]
								},
								"description": "Updates the entire profile of the currently authenticated admin user. All writable fields must be provided.\n\n**Permissions:** Authenticated Admin (`IsAuthenticated`, `IsAdminUser`)\n\n**Note on `profile_picture`**: This field expects a URL string. It is recommended to first upload the image using the `POST {{base_url}}/api/{{api_version}}/users/me/avatar/` endpoint (if admins share this generic endpoint) and then use the returned URL here."
							},
							"response": [
								{
									"name": "Success - Admin Profile Updated (200 OK)",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{admin_access_token_example}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"updated_admin_username\",\n    \"phone_number\": \"+15557654321\",\n    \"first_name\": \"UpdatedAdmin\",\n    \"last_name\": \"User\",\n    \"profile_picture\": \"{{base_url}}/media/profile_pictures/new_admin_pic.jpg\",\n    \"bio\": \"Updated bio for the site administrator.\",\n    \"location\": \"Remote Office\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/admin/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"admin",
												"me",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"usr_01HADMINIDEXAMPLE\",\n    \"username\": \"updated_admin_username\",\n    \"email\": \"admin@example.com\",\n    \"phone_number\": \"+15557654321\",\n    \"first_name\": \"UpdatedAdmin\",\n    \"last_name\": \"User\",\n    \"user_type\": \"admin\",\n    \"profile_picture\": \"{{base_url}}/media/profile_pictures/new_admin_pic.jpg\",\n    \"bio\": \"Updated bio for the site administrator.\",\n    \"location\": \"Remote Office\",\n    \"is_staff\": true,\n    \"is_superuser\": true,\n    \"created_at\": \"2023-01-01T00:00:00Z\",\n    \"updated_at\": \"2023-10-28T20:00:00Z\"\n}"
								},
								{
									"name": "Error - Validation Error (400 Bad Request)",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{admin_access_token_example}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"existing_user\",\n    \"phone_number\": \"invalid-phone\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/admin/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"admin",
												"me",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"username\": [\"A user with that username already exists.\"],\n    \"phone_number\": [\"The phone number has an invalid format.\"]\n}"
								},
								{
									"name": "Error - Unauthorized (401)",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer invalid_token",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"first_name\": \"AnyAdminName\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/admin/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"admin",
												"me",
												""
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
								}
							]
						},
						{
							"name": "Partially Update Admin Profile",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"description": "Access token for authentication (Admin specific).",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"location\": \"Main Branch\",\n    \"bio\": \"Administrator with updated responsibilities.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/users/admin/me/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"users",
										"admin",
										"me",
										""
									]
								},
								"description": "Partially updates the profile of the currently authenticated admin user. Only include the fields that need to be changed.\n\n**Permissions:** Authenticated Admin (`IsAuthenticated`, `IsAdminUser`)"
							},
							"response": [
								{
									"name": "Success - Admin Profile Partially Updated (200 OK)",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{admin_access_token_example}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"location\": \"Main Branch\",\n    \"bio\": \"Administrator with updated responsibilities.\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/admin/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"admin",
												"me",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"usr_01HADMINIDEXAMPLE\",\n    \"username\": \"admin_user\",\n    \"email\": \"admin@example.com\",\n    \"phone_number\": \"+15551234567\",\n    \"first_name\": \"Admin\",\n    \"last_name\": \"User\",\n    \"user_type\": \"admin\",\n    \"profile_picture\": \"{{base_url}}/media/profile_pictures/admin_default.png\",\n    \"bio\": \"Administrator with updated responsibilities.\",\n    \"location\": \"Main Branch\",\n    \"is_staff\": true,\n    \"is_superuser\": true,\n    \"created_at\": \"2023-01-01T00:00:00Z\",\n    \"updated_at\": \"2023-10-28T21:00:00Z\"\n}"
								},
								{
									"name": "Error - Validation Error (400 Bad Request)",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{admin_access_token_example}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"another_existing_admin_user\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/admin/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"admin",
												"me",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"username\": [\"A user with that username already exists.\"]\n}"
								},
								{
									"name": "Error - Unauthorized (401)",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer invalid_token",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"location\": \"Some New Admin Location\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/admin/me/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"admin",
												"me",
												""
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
								}
							]
						}
					],
					"description": "Endpoints specific to an authenticated admin for managing their own profile and related data. Base path: /api/{{api_version}}/users/admin/me/"
				},
				{
					"name": "User Search Endpoints",
					"item": [
						{
							"name": "General User Search",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"description": "Access token for authentication.",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"query\": \"developer\",\n    \"user_type\": \"provider\",\n    \"location\": \"San Francisco, CA\",\n    \"min_rating\": 4.0,\n    \"is_verified\": true,\n    \"availability\": \"available_now\",\n    \"skills\": [\"python\", \"django\"],\n    \"page\": 1,\n    \"page_size\": 10\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/users/search/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"users",
										"search",
										""
									]
								},
								"description": "Performs a general search for users based on various criteria.\n\n**Permissions:** Authenticated User\n\n**Request Body Parameters:**\n- `query` (string, optional): General search term (e.g., name, skill, bio keyword).\n- `user_type` (string, optional): Filter by user type. Enum: \"customer\", \"provider\".\n- `location` (string, optional): Filter by user location.\n- `min_rating` (float, optional): Minimum average rating (typically for providers).\n- `is_verified` (boolean, optional): Filter by verification status.\n- `availability` (string, optional): For providers. Enum: \"available_now\", \"specific_dates\", etc.\n- `skills` (array of strings, optional): For providers. List of skills to match.\n- `page` (integer, optional): Page number for pagination.\n- `page_size` (integer, optional): Number of results per page."
							},
							"response": [
								{
									"name": "Success - Users Found (200 OK)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"query\": \"developer\",\n    \"user_type\": \"provider\",\n    \"location\": \"San Francisco, CA\",\n    \"min_rating\": 4.0,\n    \"is_verified\": true,\n    \"availability\": \"available_now\",\n    \"skills\": [\"python\", \"django\"],\n    \"page\": 1,\n    \"page_size\": 10\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/search/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"search",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"count\": 1,\n    \"next\": null,\n    \"previous\": null,\n    \"results\": [\n        {\n            \"id\": \"usr_01HSEARCHRESULT1\",\n            \"username\": \"found_provider1\",\n            \"first_name\": \"Skilled\",\n            \"last_name\": \"Developer\",\n            \"user_type\": \"provider\",\n            \"profile_picture\": \"{{base_url}}/media/profile_pictures/found_provider1.jpg\",\n            \"bio\": \"Experienced Python/Django developer available for projects.\",\n            \"location\": \"San Francisco, CA\",\n            \"is_verified\": true,\n            \"rating\": \"4.8\"\n        }\n    ]\n}"
								},
								{
									"name": "Error - Validation Error (400 Bad Request)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"min_rating\": 6.0,\n    \"user_type\": \"invalid_type\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/search/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"search",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"min_rating\": [\"Ensure this value is between 0.0 and 5.0.\"],\n    \"user_type\": [\"\\\"invalid_type\\\" is not a valid choice.\"]\n}"
								},
								{
									"name": "Error - Unauthorized (401)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer invalid_token",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"query\": \"any\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/users/search/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"users",
												"search",
												""
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
								}
							]
						}
					],
					"description": "Endpoints related to searching for users within the Prbal platform."
				}
			],
			"description": "Endpoints for managing user profiles and related data."
		},
		{
			"name": "Services & Service Requests",
			"item": [
				{
					"name": "Public Service & Category Endpoints",
					"item": [
						{
							"name": "Service Categories",
							"item": [
								{
									"name": "List Service Categories",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/services/categories/?is_active=true&search=home&ordering=name",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"services",
												"categories",
												""
											],
											"query": [
												{
													"key": "is_active",
													"value": "true",
													"description": "(boolean): Filter by active status (e.g., `true`)."
												},
												{
													"key": "search",
													"value": "home",
													"description": "(string): Search term for `name` and `description` fields (e.g., `home`)."
												},
												{
													"key": "ordering",
													"value": "name",
													"description": "(string): Field to order by. Options: `name`, `-name`, `created_at`, `-created_at`."
												}
											]
										},
										"description": "Retrieves a list of all service categories. Publicly accessible.\n\n**Permissions:** Public\n\n**Query Parameters:**\n- `is_active` (boolean): Filter by active status (e.g., `?is_active=true`).\n- `search` (string): Search term for `name` and `description` fields.\n- `ordering` (string): Field to order by. Options: `name`, `-name`, `created_at`, `-created_at`."
									},
									"response": [
										{
											"name": "Success - List of Service Categories (200 OK)",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/categories/?is_active=true&search=home&ordering=name",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"categories",
														""
													],
													"query": [
														{
															"key": "is_active",
															"value": "true"
														},
														{
															"key": "search",
															"value": "home"
														},
														{
															"key": "ordering",
															"value": "name"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n    {\n        \"id\": 1,\n        \"name\": \"Home Repairs\",\n        \"description\": \"Services related to home repair and maintenance.\",\n        \"icon\": \"fas fa-tools\",\n        \"is_active\": true,\n        \"created_at\": \"2023-10-01T10:00:00Z\",\n        \"updated_at\": \"2023-10-01T10:00:00Z\",\n        \"slug\": \"home-repairs\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Gardening\",\n        \"description\": \"Gardening and landscaping services.\",\n        \"icon\": \"fas fa-leaf\",\n        \"is_active\": true,\n        \"created_at\": \"2023-10-02T11:00:00Z\",\n        \"updated_at\": \"2023-10-02T11:00:00Z\",\n        \"slug\": \"gardening\"\n    }\n]"
										},
										{
											"name": "Error - Internal Server Error (500)",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/categories/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"categories",
														""
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"An unexpected error occurred on the server.\"\n}"
										}
									]
								},
								{
									"name": "Retrieve Service Category",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/services/categories/home-repairs/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"services",
												"categories",
												"home-repairs",
												""
											],
											"variable": [
												{
													"key": "slug",
													"value": "home-repairs",
													"description": "(string) The slug of the service category (e.g., `home-repairs`)."
												}
											]
										},
										"description": "Retrieves a specific service category by its slug. Publicly accessible.\n\n**Permissions:** Public\n\n**Path Variables:**\n- `slug` (string, required): The slug of the service category to retrieve."
									},
									"response": [
										{
											"name": "Success - Service Category Details (200 OK)",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/categories/home-repairs/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"categories",
														"home-repairs",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": 1,\n    \"name\": \"Home Repairs\",\n    \"description\": \"Services related to home repair and maintenance.\",\n    \"icon\": \"fas fa-tools\",\n    \"is_active\": true,\n    \"created_at\": \"2023-10-01T10:00:00Z\",\n    \"updated_at\": \"2023-10-01T10:00:00Z\",\n    \"slug\": \"home-repairs\"\n}"
										},
										{
											"name": "Error - Not Found (404)",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/categories/non-existent-slug/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"categories",
														"non-existent-slug",
														""
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"Not found.\"\n}"
										}
									]
								},
								{
									"name": "Create Service Category",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{admin_access_token}}",
												"description": "Access token for authentication (Admin required).",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Gardening Services\",\n    \"description\": \"All kinds of gardening and lawn care services.\",\n    \"icon\": \"fas fa-leaf\",\n    \"is_active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/services/categories/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"services",
												"categories",
												""
											]
										},
										"description": "Creates a new service category. Requires Admin privileges.\n\n**Permissions:** Admin (`IsAuthenticated`, `IsAdminUser`)\n\n**Request Body:**\n- `name` (string, required): Name of the category.\n- `description` (string, optional): Description of the category.\n- `icon` (string, optional): Icon class for the category (e.g., Font Awesome).\n- `is_active` (boolean, optional, default: true): Whether the category is active.",
										"event": [
											{
												"listen": "test",
												"script": {
													"exec": [
														"pm.test(\"Status code is 201 Created\", function () {",
														"    pm.response.to.have.status(201);",
														"});",
														"",
														"pm.test(\"Response contains created category details\", function () {",
														"    const jsonData = pm.response.json();",
														"    const requestBody = JSON.parse(pm.request.body.raw);",
														"    ",
														"    pm.expect(jsonData.id).to.be.a('string', \"ID should be a string\");",
														"    pm.expect(jsonData.name).to.eql(requestBody.name, \"Name should match request\");",
														"    pm.expect(jsonData.slug).to.exist;",
														"    if (requestBody.hasOwnProperty('description')) {",
														"        pm.expect(jsonData.description).to.eql(requestBody.description, \"Description should match request\");",
														"    }",
														"    if (requestBody.hasOwnProperty('icon')) {",
														"        pm.expect(jsonData.icon).to.eql(requestBody.icon, \"Icon should match request\");",
														"    }",
														"    if (requestBody.hasOwnProperty('is_active')) {",
														"        pm.expect(jsonData.is_active).to.eql(requestBody.is_active, \"is_active status should match request\");",
														"    } else {",
														"        pm.expect(jsonData.is_active).to.eql(true, \"is_active should default to true if not in request\");",
														"    }",
														"    pm.expect(jsonData.created_at).to.exist;",
														"    pm.expect(jsonData.updated_at).to.exist;",
														"});"
													],
													"type": "text/javascript"
												}
											}
										]
									},
									"response": [
										{
											"name": "Success - Category Created (201 Created)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Gardening Services\",\n    \"description\": \"All kinds of gardening and lawn care services.\",\n    \"icon\": \"fas fa-leaf\",\n    \"is_active\": true\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/categories/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"categories",
														""
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"cat_01HNEWCATIDEXMPL\",\n    \"name\": \"Gardening Services\",\n    \"slug\": \"gardening-services\",\n    \"description\": \"All kinds of gardening and lawn care services.\",\n    \"icon\": \"fas fa-leaf\",\n    \"is_active\": true,\n    \"created_at\": \"2023-10-26T10:00:00Z\",\n    \"updated_at\": \"2023-10-26T10:00:00Z\"\n}"
										},
										{
											"name": "Error - Validation Error (400 Bad Request)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"description\": \"Only description, name is missing.\"\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/categories/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"categories",
														""
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"name\": [\"This field may not be blank.\"]\n}"
										},
										{
											"name": "Error - Unauthorized (401)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer invalid_token"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Attempt with Invalid Token\",\n    \"description\": \"This request should fail with 401.\"\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/categories/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"categories",
														""
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
										},
										{
											"name": "Error - Forbidden (403)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}",
														"description": "Access token for a non-admin user (e.g., customer or provider)."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Attempt by Non-Admin\",\n    \"description\": \"This request should fail with 403.\"\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/categories/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"categories",
														""
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"You do not have permission to perform this action.\"\n}"
										}
									]
								},
								{
									"name": "Update Service Category",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{admin_access_token}}",
												"description": "Access token for authentication (Admin required).",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Updated Home Services\",\n    \"description\": \"Comprehensive home services including repairs, maintenance, and installations.\",\n    \"icon\": \"fas fa-home-alt\",\n    \"is_active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/services/categories/{{service_category_id_or_slug}}/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"services",
												"categories",
												"{{service_category_id_or_slug}}",
												""
											],
											"variable": [
												{
													"key": "service_category_id_or_slug",
													"value": "home-repairs",
													"description": "(string) The ID or slug of the service category to update (e.g., `home-repairs` or `cat_01HNEWCATIDEXMPL`)."
												}
											]
										},
										"description": "Updates an existing service category by its ID or slug. Requires Admin privileges. All fields are optional for update, but at least one must be provided.\n\n**Permissions:** Admin (`IsAuthenticated`, `IsAdminUser`)\n\n**Path Variables:**\n- `service_category_id_or_slug` (string, required): The ID or slug of the service category to update.\n\n**Request Body:** (All fields optional)\n- `name` (string): New name of the category.\n- `description` (string): New description of the category.\n- `icon` (string): New icon class for the category.\n- `is_active` (boolean): New active status.",
										"event": [
											{
												"listen": "test",
												"script": {
													"exec": [
														"pm.test(\"Status code is 200 OK\", function () {",
														"    pm.response.to.have.status(200);",
														"});",
														"",
														"pm.test(\"Response contains updated category details\", function () {",
														"    const jsonData = pm.response.json();",
														"    const requestBody = JSON.parse(pm.request.body.raw);",
														"    ",
														"    pm.expect(jsonData.id).to.be.a('string', \"ID should be a string\");",
														"    pm.expect(jsonData.name).to.eql(requestBody.name, \"Name should match request\");",
														"    pm.expect(jsonData.slug).to.exist;",
														"    if (requestBody.hasOwnProperty('description')) {",
														"        pm.expect(jsonData.description).to.eql(requestBody.description, \"Description should match request\");",
														"    }",
														"    if (requestBody.hasOwnProperty('icon')) {",
														"        pm.expect(jsonData.icon).to.eql(requestBody.icon, \"Icon should match request\");",
														"    }",
														"    if (requestBody.hasOwnProperty('is_active')) {",
														"        pm.expect(jsonData.is_active).to.eql(requestBody.is_active, \"is_active status should match request\");",
														"    }",
														"    pm.expect(jsonData.created_at).to.exist;",
														"    pm.expect(jsonData.updated_at).to.exist;",
														"});"
													],
													"type": "text/javascript"
												}
											}
										]
									},
									"response": [
										{
											"name": "Success - Category Updated (200 OK)",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Updated Home Services\",\n    \"description\": \"Comprehensive home services including repairs, maintenance, and installations.\"\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/categories/home-repairs/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"categories",
														"home-repairs",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"cat_01HNEWCATIDEXMPL\",\n    \"name\": \"Updated Home Services\",\n    \"slug\": \"updated-home-services\",\n    \"description\": \"Comprehensive home services including repairs, maintenance, and installations.\",\n    \"icon\": \"fas fa-home-alt\",\n    \"is_active\": true,\n    \"created_at\": \"2023-10-01T10:00:00Z\",\n    \"updated_at\": \"2023-10-26T11:00:00Z\"\n}"
										},
										{
											"name": "Error - Validation Error (400 Bad Request)",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"\"\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/categories/home-repairs/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"categories",
														"home-repairs",
														""
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"name\": [\"This field may not be blank.\"]\n}"
										},
										{
											"name": "Error - Unauthorized (401)",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer invalid_token"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Attempt with Invalid Token\"\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/categories/home-repairs/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"categories",
														"home-repairs",
														""
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
										},
										{
											"name": "Error - Forbidden (403)",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Attempt by Customer\"\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/categories/home-repairs/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"categories",
														"home-repairs",
														""
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"You do not have permission to perform this action.\"\n}"
										},
										{
											"name": "Error - Not Found (404)",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Update Non Existent\"\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/categories/non-existent-category/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"categories",
														"non-existent-category",
														""
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"Not found.\"\n}"
										}
									]
								},
								{
									"name": "Partially Update Service Category",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{admin_access_token}}",
												"description": "Access token for authentication (Admin required).",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Only updating the description for home services.\",\n    \"is_active\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/services/categories/{{service_category_id_or_slug}}/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"services",
												"categories",
												"{{service_category_id_or_slug}}",
												""
											],
											"variable": [
												{
													"key": "service_category_id_or_slug",
													"value": "home-repairs",
													"description": "(string) The ID or slug of the service category to partially update (e.g., `home-repairs` or `cat_01HNEWCATIDEXMPL`)."
												}
											]
										},
										"description": "Partially updates an existing service category by its ID or slug. Requires Admin privileges. Only provided fields will be updated.\n\n**Permissions:** Admin (`IsAuthenticated`, `IsAdminUser`)\n\n**Path Variables:**\n- `service_category_id_or_slug` (string, required): The ID or slug of the service category to update.\n\n**Request Body:** (All fields optional, provide only fields to update)\n- `name` (string): New name of the category.\n- `description` (string): New description of the category.\n- `icon` (string): New icon class for the category.\n- `is_active` (boolean): New active status.",
										"event": [
											{
												"listen": "test",
												"script": {
													"exec": [
														"pm.test(\"Status code is 200 OK\", function () {",
														"    pm.response.to.have.status(200);",
														"});",
														"",
														"pm.test(\"Response body is a valid JSON\", function () {",
														"    pm.response.to.be.json;",
														"});",
														"",
														"const jsonData = pm.response.json();",
														"const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
														"",
														"pm.test(\"Response has id, slug, created_at, updated_at\", function () {",
														"    pm.expect(jsonData).to.have.property('id');",
														"    pm.expect(jsonData).to.have.property('slug');",
														"    pm.expect(jsonData).to.have.property('created_at');",
														"    pm.expect(jsonData).to.have.property('updated_at');",
														"});",
														"",
														"// Check fields that were sent in the PATCH request",
														"if (requestBody.hasOwnProperty('name')) {",
														"    pm.test(\"Response 'name' matches request if provided\", function () {",
														"        pm.expect(jsonData.name).to.eql(requestBody.name);",
														"    });",
														"}",
														"if (requestBody.hasOwnProperty('description')) {",
														"    pm.test(\"Response 'description' matches request if provided\", function () {",
														"        pm.expect(jsonData.description).to.eql(requestBody.description);",
														"    });",
														"}",
														"if (requestBody.hasOwnProperty('icon')) {",
														"    pm.test(\"Response 'icon' matches request if provided\", function () {",
														"        pm.expect(jsonData.icon).to.eql(requestBody.icon);",
														"    });",
														"}",
														"if (requestBody.hasOwnProperty('is_active')) {",
														"    pm.test(\"Response 'is_active' matches request if provided\", function () {",
														"        pm.expect(jsonData.is_active).to.eql(requestBody.is_active);",
														"    });",
														"}"
													],
													"type": "text/javascript"
												}
											}
										]
									},
									"response": [
										{
											"name": "Success - Category Partially Updated (200 OK)",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"description\": \"Only updating the description for home services.\",\n    \"is_active\": false\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/categories/home-repairs/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"categories",
														"home-repairs",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"cat_01HNEWCATIDEXMPL\",\n    \"name\": \"Updated Home Services\",\n    \"slug\": \"updated-home-services\",\n    \"description\": \"Only updating the description for home services.\",\n    \"icon\": \"fas fa-home-alt\",\n    \"is_active\": false,\n    \"created_at\": \"2023-10-01T10:00:00Z\",\n    \"updated_at\": \"2023-10-26T12:00:00Z\"\n}"
										},
										{
											"name": "Error - Validation Error (400 Bad Request)",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"\"\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/categories/home-repairs/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"categories",
														"home-repairs",
														""
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"name\": [\"This field may not be blank.\"]\n}"
										},
										{
											"name": "Error - Unauthorized (401)",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer invalid_token"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"is_active\": true\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/categories/home-repairs/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"categories",
														"home-repairs",
														""
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
										},
										{
											"name": "Error - Forbidden (403)",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"is_active\": true\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/categories/home-repairs/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"categories",
														"home-repairs",
														""
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"You do not have permission to perform this action.\"\n}"
										},
										{
											"name": "Error - Not Found (404)",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"is_active\": true\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/categories/non-existent-category/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"categories",
														"non-existent-category",
														""
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"Not found.\"\n}"
										}
									]
								},
								{
									"name": "Delete Service Category",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{admin_access_token}}",
												"description": "Access token for authentication (Admin required).",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/services/categories/{{service_category_id_or_slug}}/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"services",
												"categories",
												"{{service_category_id_or_slug}}",
												""
											],
											"variable": [
												{
													"key": "service_category_id_or_slug",
													"value": "home-repairs-to-delete",
													"description": "(string) The ID or slug of the service category to delete (e.g., `home-repairs-to-delete` or `cat_01HNEWCATIDEXMPLTDEL`)."
												}
											]
										},
										"description": "Deletes an existing service category by its ID or slug. Requires Admin privileges.\n\n**Permissions:** Admin (`IsAuthenticated`, `IsAdminUser`)\n\n**Path Variables:**\n- `service_category_id_or_slug` (string, required): The ID or slug of the service category to delete.",
										"event": [
											{
												"listen": "test",
												"script": {
													"exec": [
														"pm.test(\"Status code is 204 No Content\", function () {",
														"    pm.response.to.have.status(204);",
														"});"
													],
													"type": "text/javascript"
												}
											}
										]
									},
									"response": [
										{
											"name": "Success - Category Deleted (204 No Content)",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/categories/home-repairs-to-delete/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"categories",
														"home-repairs-to-delete",
														""
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Error - Unauthorized (401)",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer invalid_token"
													}
												],
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/categories/home-repairs-to-delete/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"categories",
														"home-repairs-to-delete",
														""
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
										},
										{
											"name": "Error - Forbidden (403)",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/categories/home-repairs-to-delete/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"categories",
														"home-repairs-to-delete",
														""
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"You do not have permission to perform this action.\"\n}"
										},
										{
											"name": "Error - Not Found (404)",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/categories/non-existent-category/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"categories",
														"non-existent-category",
														""
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"Not found.\"\n}"
										}
									]
								}
							],
							"description": "Manage service categories. Base Path: `/api/{{api_version}}/services/categories/`"
						},
						{
							"name": "Service Subcategories",
							"item": [
								{
									"name": "List Service Subcategories",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/services/subcategories/?category_slug=home-repairs&is_active=true&search=plumbing&ordering=name",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"services",
												"subcategories",
												""
											],
											"query": [
												{
													"key": "category_slug",
													"value": "home-repairs",
													"description": "(string): Filter by parent category slug (e.g., `home-repairs`)."
												},
												{
													"key": "category_id",
													"value": "1",
													"description": "(integer): Filter by parent category ID (e.g., `1`).",
													"disabled": true
												},
												{
													"key": "is_active",
													"value": "true",
													"description": "(boolean): Filter by active status (e.g., `true`)."
												},
												{
													"key": "search",
													"value": "plumbing",
													"description": "(string): Search term for `name` and `description` fields (e.g., `plumbing`)."
												},
												{
													"key": "ordering",
													"value": "name",
													"description": "(string): Field to order by. Options: `name`, `-name`, `created_at`, `-created_at`."
												}
											]
										},
										"description": "Retrieves a list of all service subcategories. Publicly accessible. Can be filtered by `category_id` or `category_slug`.\n\n**Permissions:** Public\n\n**Query Parameters:**\n- `category_id` (integer): Filter by parent category ID.\n- `category_slug` (string): Filter by parent category slug.\n- `is_active` (boolean): Filter by active status.\n- `search` (string): Search term.\n- `ordering` (string): Field to order by.",
										"event": [
											{
												"listen": "test",
												"script": {
													"exec": [
														"pm.test(\"Status code is 200 OK\", function () {",
														"    pm.response.to.have.status(200);",
														"});",
														"",
														"pm.test(\"Response is a valid JSON array\", function () {",
														"    pm.response.to.be.json;",
														"    const responseData = pm.response.json();",
														"    expect(responseData).to.be.an('array');",
														"});",
														"",
														"const responseData = pm.response.json();",
														"if (responseData && responseData.length > 0) {",
														"    pm.test(\"Each subcategory in the array has required fields\", function () {",
														"        responseData.forEach(function(subcategory) {",
														"            expect(subcategory).to.have.property('id').and.to.be.a('number');",
														"            expect(subcategory).to.have.property('category').and.to.be.an('object');",
														"            expect(subcategory.category).to.have.property('id').and.to.be.a('number');",
														"            expect(subcategory.category).to.have.property('name').and.to.be.a('string');",
														"            expect(subcategory.category).to.have.property('slug').and.to.be.a('string');",
														"            expect(subcategory).to.have.property('name').and.to.be.a('string');",
														"            expect(subcategory).to.have.property('slug').and.to.be.a('string');",
														"            expect(subcategory).to.have.property('description').and.to.be.a('string');",
														"            expect(subcategory).to.have.property('icon').and.to.be.a('string');",
														"            expect(subcategory).to.have.property('is_active').and.to.be.a('boolean');",
														"            expect(subcategory).to.have.property('created_at').and.to.be.a('string');",
														"            expect(subcategory).to.have.property('updated_at').and.to.be.a('string');",
														"        });",
														"    });",
														"}"
													],
													"type": "text/javascript"
												}
											}
										]
									},
									"response": [
										{
											"name": "Success - List of Service Subcategories (200 OK)",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/subcategories/?category_slug=home-repairs&is_active=true",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"subcategories",
														""
													],
													"query": [
														{
															"key": "category_slug",
															"value": "home-repairs"
														},
														{
															"key": "is_active",
															"value": "true"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n    {\n        \"id\": 1,\n        \"category\": {\n            \"id\": 1,\n            \"name\": \"Home Repairs\",\n            \"slug\": \"home-repairs\"\n        },\n        \"name\": \"Plumbing\",\n        \"description\": \"All plumbing related services.\",\n        \"icon\": \"fas fa-faucet\",\n        \"is_active\": true,\n        \"created_at\": \"2023-10-03T12:00:00Z\",\n        \"updated_at\": \"2023-10-03T12:00:00Z\",\n        \"slug\": \"plumbing\"\n    },\n    {\n        \"id\": 2,\n        \"category\": {\n            \"id\": 1,\n            \"name\": \"Home Repairs\",\n            \"slug\": \"home-repairs\"\n        },\n        \"name\": \"Electrical\",\n        \"description\": \"Electrical repair and installation services.\",\n        \"icon\": \"fas fa-bolt\",\n        \"is_active\": true,\n        \"created_at\": \"2023-10-04T13:00:00Z\",\n        \"updated_at\": \"2023-10-04T13:00:00Z\",\n        \"slug\": \"electrical\"\n    }\n]"
										},
										{
											"name": "Error - Internal Server Error (500)",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/subcategories/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"subcategories",
														""
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"An unexpected error occurred on the server.\"\n}"
										}
									]
								},
								{
									"name": "Retrieve Service Subcategory",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/services/subcategories/plumbing/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"services",
												"subcategories",
												"plumbing",
												""
											],
											"variable": [
												{
													"key": "slug",
													"value": "plumbing",
													"description": "(string) The slug of the service subcategory (e.g., `plumbing`)."
												}
											]
										},
										"description": "Retrieves a specific service subcategory by its slug. Publicly accessible.\n\n**Permissions:** Public\n\n**Path Variables:**\n- `slug` (string, required): The slug of the service subcategory to retrieve.",
										"event": [
											{
												"listen": "test",
												"script": {
													"exec": [
														"pm.test(\"Status code is 200 OK\", function () {",
														"    pm.response.to.have.status(200);",
														"});",
														"",
														"pm.test(\"Response is a valid JSON object\", function () {",
														"    pm.response.to.be.json;",
														"    const responseData = pm.response.json();",
														"    expect(responseData).to.be.an('object');",
														"});",
														"",
														"const responseData = pm.response.json();",
														"pm.test(\"Response body has required fields\", function () {",
														"    expect(responseData).to.have.property('id').and.to.be.a('number');",
														"    expect(responseData).to.have.property('category').and.to.be.an('object');",
														"    expect(responseData.category).to.have.property('id').and.to.be.a('number');",
														"    expect(responseData.category).to.have.property('name').and.to.be.a('string');",
														"    expect(responseData.category).to.have.property('slug').and.to.be.a('string');",
														"    expect(responseData).to.have.property('name').and.to.be.a('string');",
														"    expect(responseData).to.have.property('slug').and.to.be.a('string');",
														"    expect(responseData).to.have.property('description').and.to.be.a('string');",
														"    expect(responseData).to.have.property('icon').and.to.be.a('string');",
														"    expect(responseData).to.have.property('is_active').and.to.be.a('boolean');",
														"    expect(responseData).to.have.property('created_at').and.to.be.a('string');",
														"    pm.expect(Date.parse(responseData.created_at)).to.not.be.NaN;",
														"    expect(responseData).to.have.property('updated_at').and.to.be.a('string');",
														"    pm.expect(Date.parse(responseData.updated_at)).to.not.be.NaN;",
														"});"
													],
													"type": "text/javascript"
												}
											}
										]
									},
									"response": [
										{
											"name": "Success - Service Subcategory Details (200 OK)",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/subcategories/plumbing/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"subcategories",
														"plumbing",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": 1,\n    \"category\": {\n        \"id\": 1,\n        \"name\": \"Home Repairs\",\n        \"slug\": \"home-repairs\"\n    },\n    \"name\": \"Plumbing\",\n    \"description\": \"All plumbing related services.\",\n    \"icon\": \"fas fa-faucet\",\n    \"is_active\": true,\n    \"created_at\": \"2023-10-03T12:00:00Z\",\n    \"updated_at\": \"2023-10-03T12:00:00Z\",\n    \"slug\": \"plumbing\"\n}"
										},
										{
											"name": "Error - Not Found (404)",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/subcategories/non-existent-slug/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"subcategories",
														"non-existent-slug",
														""
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"Not found.\"\n}"
										}
									]
								},
								{
									"name": "Create Service Subcategory",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{admin_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"category\": {{service_category_id_for_subcategory_example}}, \n    \"name\": \"New Subcategory Name Example\",\n    \"description\": \"Detailed description for the new subcategory example.\",\n    \"icon\": \"fas fa-plus-circle\",\n    \"is_active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/services/subcategories/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"services",
												"subcategories",
												""
											]
										},
										"description": "Creates a new service subcategory. \n\n**Permissions:** Admin User (Requires `is_staff` or `is_superuser` to be true).\n\n**Important:** Replace `{{service_category_id_for_subcategory_example}}` in the request body with an actual ID of an existing service category (e.g., `1`, `2`).\n\n**Request Body Fields:**\n- `category` (integer, **required**): ID of the parent service category.\n- `name` (string, **required**): Name of the subcategory.\n- `description` (string, optional): Description of the subcategory.\n- `icon` (string, optional): Icon class (e.g., Font Awesome) or URL for the subcategory.\n- `is_active` (boolean, optional, default: `true`): Whether the subcategory is active."
									},
									"response": [
										{
											"name": "Success - Subcategory Created (201 Created)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"category\": 2, \n    \"name\": \"Faucet Repair\",\n    \"description\": \"Repair and replacement of leaky faucets.\",\n    \"icon\": \"fas fa-faucet\",\n    \"is_active\": true\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/subcategories/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"subcategories",
														""
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": {{new_service_subcategory_id_example}},\n    \"category\": 2,\n    \"category_name\": \"Plumbing Services\",\n    \"name\": \"Faucet Repair\",\n    \"description\": \"Repair and replacement of leaky faucets.\",\n    \"icon\": \"fas fa-faucet\",\n    \"is_active\": true,\n    \"created_at\": \"2024-06-01T10:30:00Z\",\n    \"updated_at\": \"2024-06-01T10:30:00Z\",\n    \"slug\": \"faucet-repair\"\n}"
										},
										{
											"name": "Error - Validation Error (400 Bad Request)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"\"\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/subcategories/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"subcategories",
														""
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"category\": [\n        \"This field is required.\"\n    ],\n    \"name\": [\n        \"This field may not be blank.\"\n    ]\n}"
										},
										{
											"name": "Error - Unauthorized (401)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{invalid_token_example}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"category\": 1, \n    \"name\": \"Attempt Subcategory\"\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/subcategories/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"subcategories",
														""
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
										},
										{
											"name": "Error - Forbidden (403)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{customer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"category\": 1, \n    \"name\": \"Forbidden Subcategory\"\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/subcategories/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"subcategories",
														""
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"You do not have permission to perform this action.\"\n}"
										}
									]
								},
								{
									"name": "Update Service Subcategory (PUT)",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{admin_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"category\": {{service_category_id_for_subcategory_example}},\n    \"name\": \"Updated Subcategory Name Example\",\n    \"description\": \"Updated detailed description for the subcategory example.\",\n    \"icon\": \"fas fa-edit\",\n    \"is_active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/services/subcategories/{{service_subcategory_slug_to_update}}/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"services",
												"subcategories",
												"{{service_subcategory_slug_to_update}}",
												""
											],
											"variable": [
												{
													"key": "service_subcategory_slug_to_update",
													"value": "original-subcategory-slug",
													"description": "(string): The slug of the subcategory to update (e.g., `faucet-repair`)."
												}
											]
										},
										"description": "Updates an existing service subcategory. Requires all fields to be provided.\n\n**Permissions:** Admin User (Requires `is_staff` or `is_superuser` to be true).\n\n**Important:** Replace `{{service_subcategory_slug_to_update}}` in the URL with the slug of an actual subcategory to update. Replace `{{service_category_id_for_subcategory_example}}` in the request body with an actual ID of an existing service category.\n\n**Path Variables:**\n- `slug`: The slug of the service subcategory to update.\n\n**Request Body Fields (all required for PUT):**\n- `category` (integer): ID of the parent service category.\n- `name` (string): Name of the subcategory.\n- `description` (string): Description of the subcategory.\n- `icon` (string): Icon class or URL for the subcategory.\n- `is_active` (boolean): Whether the subcategory is active."
									},
									"response": [
										{
											"name": "Success - Subcategory Updated (200 OK)",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"category\": 2,\n    \"name\": \"Updated Faucet Repair Service\",\n    \"description\": \"Comprehensive repair and replacement of all types of faucets, updated.\",\n    \"icon\": \"fas fa-wrench\",\n    \"is_active\": true\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/subcategories/faucet-repair/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"subcategories",
														"faucet-repair",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": {{updated_service_subcategory_id_example}},\n    \"category\": 2,\n    \"category_name\": \"Plumbing Services\",\n    \"name\": \"Updated Faucet Repair Service\",\n    \"description\": \"Comprehensive repair and replacement of all types of faucets, updated.\",\n    \"icon\": \"fas fa-wrench\",\n    \"is_active\": true,\n    \"created_at\": \"2024-06-01T10:30:00Z\",\n    \"updated_at\": \"2024-06-01T11:00:00Z\",\n    \"slug\": \"updated-faucet-repair-service\"\n}"
										},
										{
											"name": "Error - Validation Error (400 Bad Request)",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"\" \n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/subcategories/faucet-repair/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"subcategories",
														"faucet-repair",
														""
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"category\": [\n        \"This field is required.\"\n    ],\n    \"name\": [\n        \"This field may not be blank.\"\n    ],\n    \"description\": [\n        \"This field is required.\"\n    ],\n    \"icon\": [\n        \"This field is required.\"\n    ],\n    \"is_active\": [\n        \"This field is required.\"\n    ]\n}"
										},
										{
											"name": "Error - Unauthorized (401)",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{invalid_token_example}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"category\": 1,\n    \"name\": \"Unauthorized Update\",\n    \"description\": \"Attempt to update subcategory.\",\n    \"icon\": \"fas fa-ban\",\n    \"is_active\": true\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/subcategories/faucet-repair/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"subcategories",
														"faucet-repair",
														""
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
										},
										{
											"name": "Error - Forbidden (403)",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{customer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"category\": 1,\n    \"name\": \"Forbidden Update\",\n    \"description\": \"Attempt to update subcategory by non-admin.\",\n    \"icon\": \"fas fa-user-lock\",\n    \"is_active\": true\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/subcategories/faucet-repair/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"subcategories",
														"faucet-repair",
														""
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"You do not have permission to perform this action.\"\n}"
										},
										{
											"name": "Error - Not Found (404)",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"category\": 1,\n    \"name\": \"Non Existent Update\",\n    \"description\": \"Attempt to update non-existent subcategory.\",\n    \"icon\": \"fas fa-ghost\",\n    \"is_active\": true\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/subcategories/non-existent-subcategory-slug/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"subcategories",
														"non-existent-subcategory-slug",
														""
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"Not found.\"\n}"
										}
									]
								},
								{
									"name": "Partially Update Service Subcategory (PATCH)",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{admin_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Partially Updated Name Example\",\n    \"is_active\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/services/subcategories/{{service_subcategory_slug_to_update}}/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"services",
												"subcategories",
												"{{service_subcategory_slug_to_update}}",
												""
											],
											"variable": [
												{
													"key": "service_subcategory_slug_to_update",
													"value": "original-subcategory-slug",
													"description": "(string): The slug of the subcategory to partially update (e.g., `faucet-repair`)."
												}
											]
										},
										"description": "Partially updates an existing service subcategory. Only the fields provided in the request body will be updated.\n\n**Permissions:** Admin User (Requires `is_staff` or `is_superuser` to be true).\n\n**Important:** Replace `{{service_subcategory_slug_to_update}}` in the URL with the slug of an actual subcategory to update.\n\n**Path Variables:**\n- `slug`: The slug of the service subcategory to update.\n\n**Request Body Fields (any subset of the following):**\n- `category` (integer, optional): ID of the parent service category.\n- `name` (string, optional): Name of the subcategory.\n- `description` (string, optional): Description of the subcategory.\n- `icon` (string, optional): Icon class or URL for the subcategory.\n- `is_active` (boolean, optional): Whether the subcategory is active."
									},
									"response": [
										{
											"name": "Success - Subcategory Partially Updated (200 OK)",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"description\": \"Only the description is updated for this subcategory.\",\n    \"icon\": \"fas fa-pencil-alt\"\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/subcategories/faucet-repair/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"subcategories",
														"faucet-repair",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": {{updated_service_subcategory_id_example}},\n    \"category\": 2,\n    \"category_name\": \"Plumbing Services\",\n    \"name\": \"Faucet Repair Service\",\n    \"description\": \"Only the description is updated for this subcategory.\",\n    \"icon\": \"fas fa-pencil-alt\",\n    \"is_active\": true,\n    \"created_at\": \"2024-06-01T10:30:00Z\",\n    \"updated_at\": \"2024-06-01T11:15:00Z\",\n    \"slug\": \"faucet-repair-service\"\n}"
										},
										{
											"name": "Error - Validation Error (400 Bad Request)",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"\" \n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/subcategories/faucet-repair/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"subcategories",
														"faucet-repair",
														""
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"name\": [\n        \"This field may not be blank.\"\n    ]\n}"
										},
										{
											"name": "Error - Unauthorized (401)",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{invalid_token_example}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"is_active\": false\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/subcategories/faucet-repair/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"subcategories",
														"faucet-repair",
														""
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
										},
										{
											"name": "Error - Forbidden (403)",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{customer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"description\": \"Attempt to update by non-admin.\"\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/subcategories/faucet-repair/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"subcategories",
														"faucet-repair",
														""
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"You do not have permission to perform this action.\"\n}"
										},
										{
											"name": "Error - Not Found (404)",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Update Non Existent Subcategory\"\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/subcategories/non-existent-subcategory-slug/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"subcategories",
														"non-existent-subcategory-slug",
														""
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"Not found.\"\n}"
										}
									]
								},
								{
									"name": "Delete Service Subcategory",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{admin_access_token}}"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/services/subcategories/{{service_subcategory_slug_to_delete}}/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"services",
												"subcategories",
												"{{service_subcategory_slug_to_delete}}",
												""
											],
											"variable": [
												{
													"key": "service_subcategory_slug_to_delete",
													"value": "slug-of-subcategory-to-delete",
													"description": "(string): The slug of the service subcategory to delete (e.g., `old-faucet-repair`)."
												}
											]
										},
										"description": "Deletes an existing service subcategory.\n\n**Permissions:** Admin User (Requires `is_staff` or `is_superuser` to be true).\n\n**Important:** Replace `{{service_subcategory_slug_to_delete}}` in the URL with the slug of an actual subcategory to delete.\n\n**Path Variables:**\n- `slug`: The slug of the service subcategory to delete."
									},
									"response": [
										{
											"name": "Success - Subcategory Deleted (204 No Content)",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/subcategories/old-faucet-repair/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"subcategories",
														"old-faucet-repair",
														""
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Error - Unauthorized (401)",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{invalid_token_example}}"
													}
												],
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/subcategories/some-subcategory/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"subcategories",
														"some-subcategory",
														""
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
										},
										{
											"name": "Error - Forbidden (403)",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{customer_access_token}}"
													}
												],
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/subcategories/another-subcategory/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"subcategories",
														"another-subcategory",
														""
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"You do not have permission to perform this action.\"\n}"
										},
										{
											"name": "Error - Not Found (404)",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/subcategories/non-existent-subcategory-slug/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"subcategories",
														"non-existent-subcategory-slug",
														""
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"Not found.\"\n}"
										}
									]
								}
							],
							"description": "Manage service subcategories. Base Path: `/api/{{api_version}}/services/subcategories/`"
						},
						{
							"name": "Services",
							"item": [
								{
									"name": "List Services",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/services/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"services",
												""
											],
											"query": [
												{
													"key": "category_slug",
													"value": "home-repairs",
													"description": "(string, optional) Filter by category slug (e.g., `home-repairs`).",
													"disabled": true
												},
												{
													"key": "subcategory_slug",
													"value": "plumbing",
													"description": "(string, optional) Filter by subcategory slug (e.g., `plumbing`).",
													"disabled": true
												},
												{
													"key": "provider_id",
													"value": "1",
													"description": "(integer, optional) Filter by provider ID.",
													"disabled": true
												},
												{
													"key": "is_active",
													"value": "true",
													"description": "(boolean, optional) Filter by active status.",
													"disabled": true
												},
												{
													"key": "search",
													"value": "emergency",
													"description": "(string, optional) Search term for service name or description.",
													"disabled": true
												},
												{
													"key": "ordering",
													"value": "-created_at",
													"description": "(string, optional) Field to order by (e.g., `name`, `-created_at`).",
													"disabled": true
												}
											]
										},
										"description": "Retrieves a list of services. Publicly accessible.\n\n**Permissions:** Public\n\n**Query Parameters:**\n- `category_slug` (string, optional): Filter by category slug.\n- `subcategory_slug` (string, optional): Filter by subcategory slug.\n- `provider_id` (integer, optional): Filter by provider ID.\n- `is_active` (boolean, optional): Filter by active status (true/false).\n- `search` (string, optional): Search term across service name and description.\n- `ordering` (string, optional): Field to order results by (e.g., `name`, `-created_at`)."
									},
									"response": [
										{
											"name": "Success - List of Services (200 OK)",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/?category_slug=home-repairs&subcategory_slug=plumbing",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														""
													],
													"query": [
														{
															"key": "category_slug",
															"value": "home-repairs"
														},
														{
															"key": "subcategory_slug",
															"value": "plumbing"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"count\": 1,\n    \"next\": null,\n    \"previous\": null,\n    \"results\": [\n        {\n            \"id\": 1,\n            \"provider\": {\n                \"id\": 1,\n                \"user\": {\n                    \"id\": 2,\n                    \"username\": \"provider_user\",\n                    \"first_name\": \"John\",\n                    \"last_name\": \"Doe\"\n                },\n                \"company_name\": \"John Doe Plumbing\",\n                \"is_verified\": true\n            },\n            \"category\": {\n                \"id\": 1,\n                \"name\": \"Home Repairs\",\n                \"slug\": \"home-repairs\"\n            },\n            \"subcategory\": {\n                \"id\": 1,\n                \"name\": \"Plumbing\",\n                \"slug\": \"plumbing\"\n            },\n            \"name\": \"Emergency Pipe Repair\",\n            \"description\": \"24/7 emergency pipe repair services.\",\n            \"price_type\": \"fixed\",\n            \"price\": \"150.00\",\n            \"price_currency\": \"USD\",\n            \"duration_minutes\": 60,\n            \"location_type\": \"provider_address\",\n            \"location_details\": \"123 Main St, Anytown, USA\",\n            \"is_active\": true,\n            \"created_at\": \"2023-10-05T10:00:00Z\",\n            \"updated_at\": \"2023-10-05T10:00:00Z\",\n            \"slug\": \"emergency-pipe-repair\",\n            \"average_rating\": 4.5,\n            \"total_ratings\": 10\n        }\n    ]\n}"
										},
										{
											"name": "Error - Internal Server Error (500)",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														""
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"An unexpected error occurred on the server.\"\n}"
										}
									]
								},
								{
									"name": "Retrieve Service",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/services/emergency-pipe-repair/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"services",
												"emergency-pipe-repair",
												""
											],
											"variable": [
												{
													"key": "slug",
													"value": "emergency-pipe-repair",
													"description": "(string) The slug of the service (e.g., `emergency-pipe-repair`)."
												}
											]
										},
										"description": "Retrieves a specific service by its slug. Publicly accessible.\n\n**Permissions:** Public\n\n**Path Variables:**\n- `slug` (string, required): The slug of the service to retrieve."
									},
									"response": [
										{
											"name": "Success - Service Details (200 OK)",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/emergency-pipe-repair/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"emergency-pipe-repair",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": 1,\n    \"provider\": {\n        \"id\": 1,\n        \"user\": {\n            \"id\": 2,\n            \"username\": \"provider_user\",\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\"\n        },\n        \"company_name\": \"John Doe Plumbing\",\n        \"is_verified\": true\n    },\n    \"category\": {\n        \"id\": 1,\n        \"name\": \"Home Repairs\",\n        \"slug\": \"home-repairs\"\n    },\n    \"subcategory\": {\n        \"id\": 1,\n        \"name\": \"Plumbing\",\n        \"slug\": \"plumbing\"\n    },\n    \"name\": \"Emergency Pipe Repair\",\n    \"description\": \"24/7 emergency pipe repair services.\",\n    \"price_type\": \"fixed\",\n    \"price\": \"150.00\",\n    \"price_currency\": \"USD\",\n    \"duration_minutes\": 60,\n    \"location_type\": \"provider_address\",\n    \"location_details\": \"123 Main St, Anytown, USA\",\n    \"is_active\": true,\n    \"created_at\": \"2023-10-05T10:00:00Z\",\n    \"updated_at\": \"2023-10-05T10:00:00Z\",\n    \"slug\": \"emergency-pipe-repair\",\n    \"average_rating\": 4.5,\n    \"total_ratings\": 10\n}"
										},
										{
											"name": "Error - Not Found (404)",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/non-existent-service/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"non-existent-service",
														""
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"Not found.\"\n}"
										}
									]
								},
								{
									"name": "Create Service (POST)",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{provider_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"provider\": 1, \n    \"category\": \"home-repairs\", \n    \"subcategory\": \"plumbing\", \n    \"name\": \"New Faucet Installation\",\n    \"description\": \"Professional installation of all types of new faucets.\",\n    \"price_type\": \"fixed\",\n    \"price\": \"120.00\",\n    \"price_currency\": \"USD\",\n    \"duration_minutes\": 90,\n    \"location_type\": \"customer_address\",\n    \"location_details\": \"Client's specified address\",\n    \"is_active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/services/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"services",
												""
											]
										},
										"description": "Creates a new service. \n\n**Permissions:** Admin User (Requires `is_staff` or `is_superuser` to be true).\n\n**Request Body:**\n- `provider` (integer, required): ID of the service provider.\n- `category` (string/integer, required): Slug or ID of the service category.\n- `subcategory` (string/integer, required): Slug or ID of the service subcategory.\n- `name` (string, required): Name of the service.\n- `description` (string, optional): Detailed description of the service.\n- `price_type` (string, required): Enum: `fixed`, `hourly`, `per_unit`, `negotiable`, `free`.\n- `price` (decimal string, optional): Price of the service. Required if `price_type` is not `free` or `negotiable`.\n- `price_currency` (string, optional): Currency code (e.g., `USD`). Defaults to system default if not provided.\n- `duration_minutes` (integer, optional): Estimated duration of the service in minutes.\n- `location_type` (string, required): Enum: `provider_address`, `customer_address`, `online`.\n- `location_details` (string, optional): Specifics about the location (e.g., address, URL).\n- `is_active` (boolean, optional, default: `true`): Whether the service is active."
									},
									"response": [
										{
											"name": "Success - Service Created (201 Created)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"provider\": 1,\n    \"category\": \"home-repairs\",\n    \"subcategory\": \"plumbing\",\n    \"name\": \"New Faucet Installation\",\n    \"description\": \"Professional installation of all types of new faucets.\",\n    \"price_type\": \"fixed\",\n    \"price\": \"120.00\",\n    \"price_currency\": \"USD\",\n    \"duration_minutes\": 90,\n    \"location_type\": \"customer_address\",\n    \"location_details\": \"Client's specified address\",\n    \"is_active\": true\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														""
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": 3,\n    \"provider\": {\n        \"id\": 1,\n        \"user\": {\n            \"id\": 2,\n            \"username\": \"provider_user\",\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\"\n        },\n        \"company_name\": \"John Doe Plumbing\",\n        \"is_verified\": true\n    },\n    \"category\": {\n        \"id\": 1,\n        \"name\": \"Home Repairs\",\n        \"slug\": \"home-repairs\"\n    },\n    \"subcategory\": {\n        \"id\": 1,\n        \"name\": \"Plumbing\",\n        \"slug\": \"plumbing\"\n    },\n    \"name\": \"New Faucet Installation\",\n    \"description\": \"Professional installation of all types of new faucets.\",\n    \"price_type\": \"fixed\",\n    \"price\": \"120.00\",\n    \"price_currency\": \"USD\",\n    \"duration_minutes\": 90,\n    \"location_type\": \"customer_address\",\n    \"location_details\": \"Client's specified address\",\n    \"is_active\": true,\n    \"created_at\": \"2023-10-07T12:00:00Z\",\n    \"updated_at\": \"2023-10-07T12:00:00Z\",\n    \"slug\": \"new-faucet-installation\",\n    \"average_rating\": null,\n    \"total_ratings\": 0\n}"
										},
										{
											"name": "Error - Validation Error (400 Bad Request)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"\"\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														""
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"provider\": [\n        \"This field is required.\"\n    ],\n    \"category\": [\n        \"This field is required.\"\n    ],\n    \"subcategory\": [\n        \"This field is required.\"\n    ],\n    \"name\": [\n        \"This field may not be blank.\"\n    ],\n    \"price_type\": [\n        \"This field is required.\"\n    ],\n    \"location_type\": [\n        \"This field is required.\"\n    ]\n}"
										},
										{
											"name": "Error - Unauthorized (401)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{invalid_token_example}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"provider\": 1,\n    \"category\": \"home-repairs\",\n    \"subcategory\": \"plumbing\",\n    \"name\": \"Valid Service Name\"\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														""
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
										},
										{
											"name": "Error - Forbidden (403)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{customer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"provider\": 1,\n    \"category\": \"home-repairs\",\n    \"subcategory\": \"plumbing\",\n    \"name\": \"Valid Service Name\"\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														""
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"You do not have permission to perform this action.\"\n}"
										}
									]
								},
								{
									"name": "Update Service (PUT)",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{admin_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"provider\": 1,\n    \"category\": \"home-repairs-updated\",\n    \"subcategory\": \"plumbing-updated\",\n    \"name\": \"Updated Faucet Installation Service\",\n    \"description\": \"Comprehensive updated installation of all types of new faucets and fixtures.\",\n    \"price_type\": \"fixed\",\n    \"price\": \"130.00\",\n    \"price_currency\": \"USD\",\n    \"duration_minutes\": 100,\n    \"location_type\": \"customer_address\",\n    \"location_details\": \"Client's updated specified address\",\n    \"is_active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/services/{{service_slug_to_update}}/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"services",
												"{{service_slug_to_update}}",
												""
											],
											"variable": [
												{
													"key": "service_slug_to_update",
													"value": "new-faucet-installation",
													"description": "(string) Slug of the service to update."
												}
											]
										},
										"description": "Updates an existing service by its slug. Requires all fields for a full update (PUT).\n\n**Permissions:** Admin User (Requires `is_staff` or `is_superuser` to be true).\n\n**Path Variables:**\n- `service_slug_to_update` (string, required): The slug of the service to update.\n\n**Request Body:** (All fields are typically required for PUT, or should match the model structure)\n- `provider` (integer, required): ID of the service provider.\n- `category` (string/integer, required): Slug or ID of the service category.\n- `subcategory` (string/integer, required): Slug or ID of the service subcategory.\n- `name` (string, required): Name of the service.\n- `description` (string, optional): Detailed description of the service.\n- `price_type` (string, required): Enum: `fixed`, `hourly`, `per_unit`, `negotiable`, `free`.\n- `price` (decimal string, optional): Price of the service.\n- `price_currency` (string, optional): Currency code.\n- `duration_minutes` (integer, optional): Estimated duration.\n- `location_type` (string, required): Enum: `provider_address`, `customer_address`, `online`.\n- `location_details` (string, optional): Location specifics.\n- `is_active` (boolean, optional): Active status."
									},
									"response": [
										{
											"name": "Success - Service Updated (200 OK)",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"provider\": 1,\n    \"category\": \"home-repairs-updated\",\n    \"subcategory\": \"plumbing-updated\",\n    \"name\": \"Updated Faucet Installation Service\",\n    \"description\": \"Comprehensive updated installation of all types of new faucets and fixtures.\",\n    \"price_type\": \"fixed\",\n    \"price\": \"130.00\",\n    \"price_currency\": \"USD\",\n    \"duration_minutes\": 100,\n    \"location_type\": \"customer_address\",\n    \"location_details\": \"Client's updated specified address\",\n    \"is_active\": true\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/new-faucet-installation/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"new-faucet-installation",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": 3,\n    \"provider\": {\n        \"id\": 1,\n        \"user\": {\n            \"id\": 2,\n            \"username\": \"provider_user\",\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\"\n        },\n        \"company_name\": \"John Doe Plumbing\",\n        \"is_verified\": true\n    },\n    \"category\": {\n        \"id\": 1,\n        \"name\": \"Home Repairs Updated\",\n        \"slug\": \"home-repairs-updated\"\n    },\n    \"subcategory\": {\n        \"id\": 1,\n        \"name\": \"Plumbing Updated\",\n        \"slug\": \"plumbing-updated\"\n    },\n    \"name\": \"Updated Faucet Installation Service\",\n    \"description\": \"Comprehensive updated installation of all types of new faucets and fixtures.\",\n    \"price_type\": \"fixed\",\n    \"price\": \"130.00\",\n    \"price_currency\": \"USD\",\n    \"duration_minutes\": 100,\n    \"location_type\": \"customer_address\",\n    \"location_details\": \"Client's updated specified address\",\n    \"is_active\": true,\n    \"created_at\": \"2023-10-07T12:00:00Z\",\n    \"updated_at\": \"2023-10-07T12:05:00Z\",\n    \"slug\": \"updated-faucet-installation-service\",\n    \"average_rating\": null,\n    \"total_ratings\": 0\n}"
										},
										{
											"name": "Error - Validation Error (400 Bad Request)",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"\"\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/new-faucet-installation/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"new-faucet-installation",
														""
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"name\": [\n        \"This field may not be blank.\"\n    ]\n}"
										},
										{
											"name": "Error - Not Found (404)",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"provider\": 1,\n    \"category\": \"home-repairs-updated\",\n    \"subcategory\": \"plumbing-updated\",\n    \"name\": \"Updated Service Name\",\n    \"price_type\": \"fixed\",\n    \"location_type\": \"customer_address\",\n    \"is_active\": true\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/non-existent-service-slug/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"non-existent-service-slug",
														""
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"Not found.\"\n}"
										},
										{
											"name": "Error - Unauthorized (401)",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Attempt to update without token\"\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/new-faucet-installation/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"new-faucet-installation",
														""
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [],
											"cookie": [],
											"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
										},
										{
											"name": "Error - Forbidden (403)",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{customer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Attempt to update with non-admin token\"\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/new-faucet-installation/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"new-faucet-installation",
														""
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [],
											"cookie": [],
											"body": "{\n    \"detail\": \"You do not have permission to perform this action.\"\n}"
										}
									]
								},
								{
									"name": "Partially Update Service (PATCH)",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{admin_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Minor update to the service description only.\",\n    \"price\": \"135.00\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/services/{{service_slug_to_patch}}/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"services",
												"{{service_slug_to_patch}}",
												""
											],
											"variable": [
												{
													"key": "service_slug_to_patch",
													"value": "updated-faucet-installation-service",
													"description": "(string) Slug of the service to partially update."
												}
											]
										},
										"description": "Partially updates an existing service by its slug. Only include the fields to be updated.\n\n**Permissions:** Admin User (Requires `is_staff` or `is_superuser` to be true).\n\n**Path Variables:**\n- `service_slug_to_patch` (string, required): The slug of the service to update.\n\n**Request Body:** (Include only fields to be updated)\n- `provider` (integer, optional): ID of the service provider.\n- `category` (string/integer, optional): Slug or ID of the service category.\n- `subcategory` (string/integer, optional): Slug or ID of the service subcategory.\n- `name` (string, optional): Name of the service.\n- `description` (string, optional): Detailed description of the service.\n- `price_type` (string, optional): Enum: `fixed`, `hourly`, `per_unit`, `negotiable`, `free`.\n- `price` (decimal string, optional): Price of the service.\n- `price_currency` (string, optional): Currency code.\n- `duration_minutes` (integer, optional): Estimated duration.\n- `location_type` (string, optional): Enum: `provider_address`, `customer_address`, `online`.\n- `location_details` (string, optional): Location specifics.\n- `is_active` (boolean, optional): Active status."
									},
									"response": [
										{
											"name": "Success - Service Partially Updated (200 OK)",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"description\": \"Minor update to the service description only.\",\n    \"price\": \"135.00\"\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/updated-faucet-installation-service/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"updated-faucet-installation-service",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": 3,\n    \"provider\": {\n        \"id\": 1,\n        \"user\": {\n            \"id\": 2,\n            \"username\": \"provider_user\",\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\"\n        },\n        \"company_name\": \"John Doe Plumbing\",\n        \"is_verified\": true\n    },\n    \"category\": {\n        \"id\": 1,\n        \"name\": \"Home Repairs Updated\",\n        \"slug\": \"home-repairs-updated\"\n    },\n    \"subcategory\": {\n        \"id\": 1,\n        \"name\": \"Plumbing Updated\",\n        \"slug\": \"plumbing-updated\"\n    },\n    \"name\": \"Updated Faucet Installation Service\",\n    \"description\": \"Minor update to the service description only.\",\n    \"price_type\": \"fixed\",\n    \"price\": \"135.00\",\n    \"price_currency\": \"USD\",\n    \"duration_minutes\": 100,\n    \"location_type\": \"customer_address\",\n    \"location_details\": \"Client's updated specified address\",\n    \"is_active\": true,\n    \"created_at\": \"2023-10-07T12:00:00Z\",\n    \"updated_at\": \"2023-10-07T12:10:00Z\",\n    \"slug\": \"updated-faucet-installation-service\",\n    \"average_rating\": null,\n    \"total_ratings\": 0\n}"
										},
										{
											"name": "Error - Validation Error (400 Bad Request)",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"price_type\": \"invalid_enum_value\"\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/updated-faucet-installation-service/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"updated-faucet-installation-service",
														""
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"price_type\": [\n        \"\\\"invalid_enum_value\\\" is not a valid choice.\"\n    ]\n}"
										},
										{
											"name": "Error - Not Found (404)",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"is_active\": false\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/non-existent-service-slug/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"non-existent-service-slug",
														""
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"Not found.\"\n}"
										},
										{
											"name": "Error - Unauthorized (401)",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"is_active\": false\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/updated-faucet-installation-service/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"updated-faucet-installation-service",
														""
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [],
											"cookie": [],
											"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
										},
										{
											"name": "Error - Forbidden (403)",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{customer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"is_active\": false\n}"
												},
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/updated-faucet-installation-service/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"updated-faucet-installation-service",
														""
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [],
											"cookie": [],
											"body": "{\n    \"detail\": \"You do not have permission to perform this action.\"\n}"
										}
									]
								},
								{
									"name": "Delete Service (DELETE)",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{admin_access_token}}"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/services/{{service_slug_to_delete}}/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"services",
												"{{service_slug_to_delete}}",
												""
											],
											"variable": [
												{
													"key": "service_slug_to_delete",
													"value": "service-slug-to-be-deleted",
													"description": "(string) Slug of the service to delete."
												}
											]
										},
										"description": "Deletes an existing service by its slug.\n\n**Permissions:** Admin User (Requires `is_staff` or `is_superuser` to be true).\n\n**Path Variables:**\n- `service_slug_to_delete` (string, required): The slug of the service to delete."
									},
									"response": [
										{
											"name": "Success - Service Deleted (204 No Content)",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/service-slug-to-be-deleted/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"service-slug-to-be-deleted",
														""
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "Text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Error - Not Found (404)",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{admin_access_token_example}}"
													}
												],
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/non-existent-service-slug/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"non-existent-service-slug",
														""
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"detail\": \"Not found.\"\n}"
										},
										{
											"name": "Error - Unauthorized (401)",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/service-slug-to-be-deleted/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"service-slug-to-be-deleted",
														""
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [],
											"cookie": [],
											"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
										},
										{
											"name": "Error - Forbidden (403)",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{customer_access_token}}"
													}
												],
												"url": {
													"raw": "{{base_url}}/api/{{api_version}}/services/service-slug-to-be-deleted/",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"{{api_version}}",
														"services",
														"service-slug-to-be-deleted",
														""
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [],
											"cookie": [],
											"body": "{\n    \"detail\": \"You do not have permission to perform this action.\"\n}"
										}
									]
								}
							],
							"description": "Manage services. Base Path: `/api/{{api_version}}/services/`"
						}
					],
					"description": "Endpoints for public access to service and category information."
				},
				{
					"name": "Service Requests (customer)",
					"item": [
						{
							"name": "List Service Requests",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{customer_access_token}}",
										"type": "text",
										"description": "Optional: Customer access token for personalized results. Publicly accessible for general listing."
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/service-requests/?category=2&urgency=high&ordering=-budget_max",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"service-requests",
										""
									],
									"query": [
										{
											"key": "category",
											"value": "2"
										},
										{
											"key": "urgency",
											"value": "high"
										},
										{
											"key": "ordering",
											"value": "-budget_max"
										}
									]
								},
								"description": "Retrieves a list of service requests. Supports filtering by category, status, urgency, etc."
							},
							"response": [
								{
									"name": "Success - List of Service Requests (200 OK)",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/service-requests/?category=2&urgency=high",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"service-requests",
												""
											],
											"query": [
												{
													"key": "category",
													"value": "2"
												},
												{
													"key": "urgency",
													"value": "high"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[{\"id\": 55,\"customer\": {\"id\": 12,\"username\": \"customer_bob\",\"user_type\": \"customer\",\"profile_picture\": \"/media/pictures/customer_bob.jpg\"},\"title\": \"Emergency Pipe Repair Needed\",\"description\": \"Main water pipe burst in the basement. Need immediate assistance.\",\"category\": 2,\"category_name\": \"Plumbing\",\"status\": \"open\",\"status_display\": \"Open\",\"urgency\": \"high\",\"urgency_display\": \"High - Within 24 hours\",\"location\": \"123 Main St, Anytown\",\"budget_min\": \"100.00\",\"budget_max\": \"500.00\",\"currency\": \"USD\",\"is_featured\": true,\"created_at\": \"2023-03-15T10:00:00Z\",\"expires_at\": \"2023-03-16T10:00:00Z\"}]"
								}
							],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });"
										],
										"type": "text/javascript"
									}
								}
							]
						},
						{
							"name": "Create Service Request",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{customer_access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"title\": \"Weekly Lawn Mowing Service\",\"description\": \"Need someone to mow my medium-sized lawn every Friday.\",\"category\": 3,\"subcategories\": [301, 302],\"budget_max\": \"50.00\",\"currency\": \"USD\",\"urgency\": \"medium\",\"requested_date_time\": \"2023-04-01T09:00:00Z\",\"location\": \"456 Oak Ave, Anytown\",\"requirements\": {\"bring_own_mower\": true,\"dispose_clippings\": true}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/service-requests/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"service-requests",
										""
									]
								},
								"description": "Creates a new service request. Authenticated customer role required."
							},
							"response": [
								{
									"name": "Success - Service Request Created (201 Created)",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {},
										"url": "{{base_url}}/api/{{api_version}}/service-requests/"
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\"id\": 56,\"customer\": {\"id\": 12,\"username\": \"customer_bob\",\"user_type\": \"customer\",\"profile_picture\": \"/media/pictures/customer_bob.jpg\"},\"title\": \"Weekly Lawn Mowing Service\",\"description\": \"Need someone to mow my medium-sized lawn every Friday.\",\"category\": {\"id\": 3,\"name\": \"Landscaping\",\"description\": \"Gardening and lawn care services.\",\"icon\": \"fas fa-leaf\",\"is_active\": true},\"subcategories\": [{\"id\": 301,\"name\": \"Lawn Mowing\"},{\"id\": 302,\"name\": \"Edging\"}],\"budget_min\": null,\"budget_max\": \"50.00\",\"currency\": \"USD\",\"urgency\": \"medium\",\"urgency_display\": \"Medium - Within a week\",\"requested_date_time\": \"2023-04-01T09:00:00Z\",\"location\": \"456 Oak Ave, Anytown\",\"latitude\": null,\"longitude\": null,\"status\": \"open\",\"status_display\": \"Open\",\"is_featured\": false,\"expires_at\": \"2023-04-08T09:00:00Z\",\"assigned_provider\": null,\"fulfilled_by_service\": null,\"requirements\": {\"bring_own_mower\": true,\"dispose_clippings\": true},\"created_at\": \"2023-03-15T11:00:00Z\",\"updated_at\": \"2023-03-15T11:00:00Z\"}"
								},
								{
									"name": "Error - Bad Request (400)",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {},
										"url": "{{base_url}}/api/{{api_version}}/service-requests/"
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\"category\": [\"This category is not active.\"],\"title\": [\"This field may not be blank.\"]}"
								},
								{
									"name": "Error - Unauthorized (401)",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": "{{base_url}}/api/{{api_version}}/service-requests/"
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\"detail\":\"Authentication credentials were not provided.\"}"
								}
							],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () { pm.response.to.have.status(201); });",
											"const jsonData = pm.response.json();",
											"if (jsonData && jsonData.id) {",
											"    pm.environment.set(\"service_request_id\", jsonData.id);",
											"    console.log(\"Set service_request_id to: \" + jsonData.id);",
											"} else {",
											"    console.log(\"Could not find service_request_id in response.\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							]
						},
						{
							"name": "Retrieve Service Request",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{customer_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/service-requests/{{service_request_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"service-requests",
										"{{service_request_id}}",
										""
									]
								},
								"description": "Retrieves detailed information about a specific service request."
							},
							"response": [
								{
									"name": "Success - Service Request Details (200 OK)",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{base_url}}/api/{{api_version}}/service-requests/{{service_request_id}}/"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\"id\": {{service_request_id}},\"customer\": {\"id\": 12,\"username\": \"customer_bob\"},\"title\": \"Weekly Lawn Mowing Service\",\"description\": \"Need someone to mow my medium-sized lawn every Friday.\",\"category\": {\"id\": 3,\"name\": \"Landscaping\"},\"subcategories\": [],\"budget_max\": \"50.00\",\"status\": \"open\",\"created_at\": \"2023-03-15T11:00:00Z\"}"
								},
								{
									"name": "Error - Not Found (404)",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{base_url}}/api/{{api_version}}/service-requests/99999/"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\"detail\":\"Not found.\"}"
								}
							],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });"
										],
										"type": "text/javascript"
									}
								}
							]
						},
						{
							"name": "Update Service Request (PUT)",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{customer_access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"title\": \"UPDATED Weekly Lawn Mowing Service\",\"description\": \"Need someone to mow my medium-sized lawn every Friday. Flexible on time.\",\"category\": 3,\"subcategories\": [301],\"budget_max\": \"55.00\",\"currency\": \"USD\",\"urgency\": \"low\",\"requested_date_time\": \"2023-04-01T10:00:00Z\",\"location\": \"456 Oak Ave, Anytown (Side Entrance)\",\"requirements\": {\"bring_own_mower\": true,\"dispose_clippings\": false}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/service-requests/{{service_request_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"service-requests",
										"{{service_request_id}}",
										""
									]
								},
								"description": "Fully updates an existing service request. Requires ownership."
							},
							"response": [
								{
									"name": "Success - Service Request Updated (200 OK)",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {},
										"url": "{{base_url}}/api/{{api_version}}/service-requests/{{service_request_id}}/"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\"id\": {{service_request_id}},\"title\": \"UPDATED Weekly Lawn Mowing Service\",\"description\": \"Need someone to mow my medium-sized lawn every Friday. Flexible on time.\",\"category\": 3,\"budget_max\": \"55.00\"}"
								},
								{
									"name": "Error - Forbidden (403)",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {},
										"url": "{{base_url}}/api/{{api_version}}/service-requests/{{service_request_id}}/"
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\"detail\":\"You do not have permission to perform this action.\"}"
								}
							],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });"
										],
										"type": "text/javascript"
									}
								}
							]
						},
						{
							"name": "Partially Update Service Request (PATCH)",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{customer_access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"budget_max\": \"60.00\",\"description\": \"Updated description: Need someone to mow my medium-sized lawn every Friday. Flexible on time. Increased budget slightly.\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/service-requests/{{service_request_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"service-requests",
										"{{service_request_id}}",
										""
									]
								},
								"description": "Partially updates an existing service request. Only include fields to be changed."
							},
							"response": [
								{
									"name": "Success - Service Request Partially Updated (200 OK)",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {},
										"url": "{{base_url}}/api/{{api_version}}/service-requests/{{service_request_id}}/"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\"id\": {{service_request_id}},\"budget_max\": \"60.00\",\"description\": \"Updated description: Need someone to mow my medium-sized lawn every Friday. Flexible on time. Increased budget slightly.\"}"
								}
							],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });"
										],
										"type": "text/javascript"
									}
								}
							]
						},
						{
							"name": "Cancel Service Request",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{customer_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/service-requests/{{service_request_id}}/cancel/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"service-requests",
										"{{service_request_id}}",
										"cancel",
										""
									]
								},
								"description": "Allows a customer to cancel their own service request."
							},
							"response": [
								{
									"name": "Success - Service Request Cancelled (200 OK)",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": "{{base_url}}/api/{{api_version}}/service-requests/{{service_request_id}}/cancel/"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\"message\": \"Service request cancelled successfully\"}"
								},
								{
									"name": "Error - Cannot Cancel (400 Bad Request)",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": "{{base_url}}/api/{{api_version}}/service-requests/{{service_request_id}}/cancel/"
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\"error\": \"Cannot cancel a request with status 'fulfilled'\"}"
								}
							],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });"
										],
										"type": "text/javascript"
									}
								}
							]
						},
						{
							"name": "List My Service Requests",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{customer_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/service-requests/my_requests/?status=open",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"service-requests",
										"my_requests",
										""
									],
									"query": [
										{
											"key": "status",
											"value": "open"
										}
									]
								},
								"description": "Retrieves a list of all service requests created by the authenticated customer."
							},
							"response": [
								{
									"name": "Success - List of My Service Requests (200 OK)",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{base_url}}/api/{{api_version}}/service-requests/my_requests/"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[{\"id\": 56,\"customer\": {\"id\": {{user_id}},\"username\": \"current_customer\"},\"title\": \"Weekly Lawn Mowing Service\",\"status\": \"open\"}]"
								}
							],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });"
										],
										"type": "text/javascript"
									}
								}
							]
						}
					],
					"description": "",
					"event": [],
					"protocolProfileBehavior": {}
				},
				{
					"name": "Service create (provider)",
					"item": [
						{
							"name": "List Provider's Services",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{provider_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/services/my_services/?category=1&ordering=-price",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"services",
										"my_services",
										""
									],
									"query": [
										{
											"key": "category",
											"value": "1"
										},
										{
											"key": "ordering",
											"value": "-price"
										}
									]
								},
								"description": "Retrieves a list of all services created by the authenticated provider. Supports filtering and ordering."
							},
							"response": [
								{
									"name": "Success - List of Provider's Services (200 OK)",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/{{api_version}}/services/my_services/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"{{api_version}}",
												"services",
												"my_services",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[{\"id\": 200,\"provider\": {\"id\": \"{{provider_user_id}}\",\"username\": \"provider_user\"},\"category\": {\"id\": 1,\"name\": \"Tutoring\"},\"title\": \"Math Tutoring for High School\",\"description\": \"Expert math tutoring for grades 9-12.\",\"price\": \"50.00\",\"currency\": \"USD\",\"location\": \"Online\",\"is_active\": true,\"created_at\": \"2023-10-01T10:00:00Z\",\"updated_at\": \"2023-10-01T10:00:00Z\"}]"
								}
							],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });"
										],
										"type": "text/javascript"
									}
								}
							]
						},
						{
							"name": "Create Service",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{provider_access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"category\": 1,\"title\": \"Advanced Web Development\",\"description\": \"Building complex web applications with modern frameworks.\",\"price\": \"75.00\",\"currency\": \"USD\",\"duration_minutes\": 60,\"location\": \"Remote\",\"availability_schedule\": {\"monday\": [\"09:00-17:00\"]},\"tags\": [\"webdev\", \"react\"],\"is_active\": true}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/services/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"services",
										""
									]
								},
								"description": "Creates a new service offered by the authenticated provider."
							},
							"response": [
								{
									"name": "Success - Service Created (201 Created)",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {},
										"url": "{{base_url}}/api/{{api_version}}/services/"
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\"id\": 201,\"provider\": {\"id\": \"{{provider_user_id}}\",\"username\": \"provider_user\"},\"category\": {\"id\": 1,\"name\": \"Tutoring\"},\"title\": \"Advanced Web Development\",\"description\": \"Building complex web applications with modern frameworks.\",\"price\": \"75.00\",\"currency\": \"USD\",\"duration_minutes\": 60,\"location\": \"Remote\",\"availability_schedule\": {\"monday\": [\"09:00-17:00\"]},\"tags\": [\"webdev\", \"react\"],\"is_active\": true,\"created_at\": \"2023-10-02T11:00:00Z\",\"updated_at\": \"2023-10-02T11:00:00Z\"}"
								},
								{
									"name": "Error - Bad Request (400)",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {},
										"url": "{{base_url}}/api/{{api_version}}/services/"
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\"category\": [\"This field is required.\"],\"title\": [\"This field may not be blank.\"]}"
								}
							],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () { pm.response.to.have.status(201); });",
											"const jsonData = pm.response.json();",
											"if (jsonData && jsonData.id) {",
											"    pm.environment.set(\"service_id\", jsonData.id);",
											"    console.log(\"Set service_id to: \" + jsonData.id);",
											"} else {",
											"    console.log(\"Could not find service_id in response.\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							]
						},
						{
							"name": "Retrieve Provider's Service",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{provider_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/services/{{service_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"services",
										"{{service_id}}",
										""
									]
								},
								"description": "Retrieves detailed information about a specific service offered by the provider."
							},
							"response": [
								{
									"name": "Success - Service Details (200 OK)",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{base_url}}/api/{{api_version}}/services/{{service_id}}/"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\"id\": {{service_id}},\"provider\": {\"id\": \"{{provider_user_id}}\",\"username\": \"provider_user\"},\"category\": {\"id\": 1,\"name\": \"Tutoring\"},\"title\": \"Advanced Web Development\",\"description\": \"Building complex web applications with modern frameworks.\",\"price\": \"75.00\",\"currency\": \"USD\",\"is_active\": true,\"created_at\": \"2023-10-02T11:00:00Z\"}"
								},
								{
									"name": "Error - Not Found (404)",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{base_url}}/api/{{api_version}}/services/99999/"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\"detail\":\"Not found.\"}"
								}
							],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });"
										],
										"type": "text/javascript"
									}
								}
							]
						},
						{
							"name": "Update Service (PUT)",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{provider_access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"category\": 1,\"title\": \"UPDATED Advanced Web Development\",\"description\": \"Building complex web applications with modern frameworks and AI integration.\",\"price\": \"80.00\",\"currency\": \"USD\",\"duration_minutes\": 75,\"location\": \"Remote / Client-site\",\"availability_schedule\": {\"monday\": [\"10:00-18:00\"]},\"tags\": [\"webdev\", \"react\", \"ai\"],\"is_active\": true}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/services/{{service_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"services",
										"{{service_id}}",
										""
									]
								},
								"description": "Fully updates an existing service. Requires ownership."
							},
							"response": [
								{
									"name": "Success - Service Updated (200 OK)",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {},
										"url": "{{base_url}}/api/{{api_version}}/services/{{service_id}}/"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\"id\": {{service_id}},\"title\": \"UPDATED Advanced Web Development\",\"price\": \"80.00\"}"
								},
								{
									"name": "Error - Forbidden (403)",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {},
										"url": "{{base_url}}/api/{{api_version}}/services/{{service_id}}/"
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\"detail\":\"You do not have permission to perform this action.\"}"
								}
							],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });"
										],
										"type": "text/javascript"
									}
								}
							]
						},
						{
							"name": "Partially Update Service (PATCH)",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{provider_access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"price\": \"85.00\",\"description\": \"Building complex web applications with modern frameworks, AI integration, and cloud deployment.\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/services/{{service_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"services",
										"{{service_id}}",
										""
									]
								},
								"description": "Partially updates an existing service. Only include fields to be changed."
							},
							"response": [
								{
									"name": "Success - Service Partially Updated (200 OK)",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {},
										"url": "{{base_url}}/api/{{api_version}}/services/{{service_id}}/"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\"id\": {{service_id}},\"price\": \"85.00\",\"description\": \"Building complex web applications with modern frameworks, AI integration, and cloud deployment.\"}"
								}
							],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });"
										],
										"type": "text/javascript"
									}
								}
							]
						},
						{
							"name": "Delete Service",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{provider_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/services/{{service_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"services",
										"{{service_id}}",
										""
									]
								},
								"description": "Deletes a service offered by the provider. Requires ownership."
							},
							"response": [
								{
									"name": "Success - Service Deleted (204 No Content)",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": "{{base_url}}/api/{{api_version}}/services/{{service_id}}/"
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": null
								},
								{
									"name": "Error - Forbidden (403)",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": "{{base_url}}/api/{{api_version}}/services/{{service_id}}/"
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\"detail\":\"You do not have permission to perform this action.\"}"
								},
								{
									"name": "Error - Not Found (404)",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": "{{base_url}}/api/{{api_version}}/services/99999/"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\"detail\":\"Not found.\"}"
								}
							],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () { pm.response.to.have.status(204); });"
										],
										"type": "text/javascript"
									}
								}
							]
						}
					],
					"description": "",
					"event": [],
					"protocolProfileBehavior": {}
				},
				{
					"name": "Service (Admin)",
					"item": [
						{
							"name": "List All Services (Admin)",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/services/?status=pending&provider_id={{provider_user_id_for_filtering}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"services",
										""
									],
									"query": [
										{
											"key": "status",
											"value": "pending"
										},
										{
											"key": "provider_id",
											"value": "{{provider_user_id_for_filtering}}",
											"disabled": true
										}
									]
								},
								"description": "Retrieves a list of all services. Admins can use filters like status, provider_id, category, etc. to manage services."
							},
							"response": [
								{
									"name": "Success - List of All Services (200 OK)",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{base_url}}/api/{{api_version}}/services/"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\"count\": 1, \"next\": null, \"previous\": null, \"results\": [{\"id\": {{service_id}},\"provider\": {\"id\": \"{{provider_user_id}}\",\"username\": \"provider_user\"},\"category\": {\"id\": 1,\"name\": \"Tutoring\"},\"title\": \"Advanced Web Development\",\"description\": \"Building complex web applications...\",\"price\": \"75.00\",\"status\": \"pending\",\"is_featured\": false}]}"
								}
							],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });"
										],
										"type": "text/javascript"
									}
								}
							]
						},
						{
							"name": "Retrieve Any Service (Admin)",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/services/{{service_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"services",
										"{{service_id}}",
										""
									]
								},
								"description": "Retrieves detailed information about a specific service, accessible by an admin."
							},
							"response": [
								{
									"name": "Success - Service Details (200 OK)",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{base_url}}/api/{{api_version}}/services/{{service_id}}/"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\"id\": {{service_id}},\"provider\": {\"id\": \"{{provider_user_id}}\",\"username\": \"provider_user\"},\"category\": {\"id\": 1,\"name\": \"Tutoring\"},\"title\": \"Advanced Web Development\",\"description\": \"Building complex web applications...\",\"price\": \"75.00\",\"status\": \"pending\",\"is_featured\": false}"
								},
								{
									"name": "Error - Not Found (404)",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{base_url}}/api/{{api_version}}/services/99999/"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\"detail\":\"Not found.\"}"
								}
							],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });"
										],
										"type": "text/javascript"
									}
								}
							]
						},
						{
							"name": "Update Service (Moderate - PATCH)",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin_access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"status\": \"active\", \"is_featured\": true, \"admin_notes\": \"Service approved and featured due to high demand.\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/services/{{service_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"services",
										"{{service_id}}",
										""
									]
								},
								"description": "Partially updates an existing service. Admins can use this to change status (e.g., 'pending' to 'active', 'active' to 'rejected'), set 'is_featured', or add admin notes."
							},
							"response": [
								{
									"name": "Success - Service Moderated (200 OK)",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {},
										"url": "{{base_url}}/api/{{api_version}}/services/{{service_id}}/"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\"id\": {{service_id}},\"status\": \"active\",\"is_featured\": true, \"admin_notes\": \"Service approved and featured due to high demand.\", \"title\": \"Advanced Web Development\"}"
								},
								{
									"name": "Error - Bad Request (400)",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {},
										"url": "{{base_url}}/api/{{api_version}}/services/{{service_id}}/"
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\"status\": [\"Invalid status transition.\"]}"
								}
							],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });"
										],
										"type": "text/javascript"
									}
								}
							]
						},
						{
							"name": "Delete Any Service (Admin)",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/services/{{service_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"services",
										"{{service_id}}",
										""
									]
								},
								"description": "Deletes a service. Accessible by an admin."
							},
							"response": [
								{
									"name": "Success - Service Deleted (204 No Content)",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": "{{base_url}}/api/{{api_version}}/services/{{service_id}}/"
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": null
								},
								{
									"name": "Error - Not Found (404)",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": "{{base_url}}/api/{{api_version}}/services/99999/"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\"detail\":\"Not found.\"}"
								}
							],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () { pm.response.to.have.status(204); });"
										],
										"type": "text/javascript"
									}
								}
							]
						}
					],
					"description": "",
					"event": [],
					"protocolProfileBehavior": {}
				}
			],
			"description": "Endpoints for managing services, service categories, and service requests."
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Product Categories",
					"item": [
						{
							"name": "List Product Categories",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/products/categories/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"products",
										"categories",
										""
									]
								},
								"description": "Retrieves a list of all product categories. Requires admin privileges."
							},
							"response": [
								{
									"name": "Success - List of Product Categories (200 OK)",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{base_url}}/api/{{api_version}}/products/categories/"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\"count\": 1, \"next\": null, \"previous\": null, \"results\": [{\"id\": \"pcat_01HXM1A6B7C8D9E0F1G2H3J4K5\",\"name\": \"Electronics\",\"description\": \"Gadgets and devices\",\"icon\": \"fas fa-laptop\",\"is_active\": true,\"parent_category\": null,\"slug\": \"electronics\"}]}"
								}
							],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });"
										],
										"type": "text/javascript"
									}
								}
							]
						},
						{
							"name": "Create Product Category",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin_access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"name\": \"Books & Stationery\",\"description\": \"All kinds of books and writing materials.\",\"icon\": \"fas fa-book\",\"is_active\": true,\"parent_category\": null}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/products/categories/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"products",
										"categories",
										""
									]
								},
								"description": "Creates a new product category. Requires admin privileges."
							},
							"response": [
								{
									"name": "Success - Product Category Created (201 Created)",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {},
										"url": "{{base_url}}/api/{{api_version}}/products/categories/"
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\"id\": \"pcat_01HYN0XYZABCDEFGHJKLMNPQRST\",\"name\": \"Books & Stationery\",\"description\": \"All kinds of books and writing materials.\",\"icon\": \"fas fa-book\",\"is_active\": true,\"parent_category\": null,\"slug\": \"books-stationery\"}"
								}
							],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () { pm.response.to.have.status(201); });",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"product_category_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							]
						},
						{
							"name": "Retrieve Product Category",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/products/categories/{{product_category_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"products",
										"categories",
										"{{product_category_id}}",
										""
									]
								},
								"description": "Retrieves a specific product category by its ID. Requires admin privileges."
							},
							"response": [
								{
									"name": "Success - Product Category Details (200 OK)",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{base_url}}/api/{{api_version}}/products/categories/{{product_category_id}}/"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\"id\": \"{{product_category_id}}\",\"name\": \"Books & Stationery\",\"description\": \"All kinds of books and writing materials.\",\"icon\": \"fas fa-book\",\"is_active\": true,\"parent_category\": null,\"slug\": \"books-stationery\"}"
								}
							],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });"
										],
										"type": "text/javascript"
									}
								}
							]
						},
						{
							"name": "Update Product Category (PUT)",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin_access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"name\": \"Updated Books & Stationery\",\"description\": \"All kinds of books, updated description.\",\"icon\": \"fas fa-book-reader\",\"is_active\": true,\"parent_category\": null}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/products/categories/{{product_category_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"products",
										"categories",
										"{{product_category_id}}",
										""
									]
								},
								"description": "Updates an existing product category. All fields must be provided. Requires admin privileges."
							},
							"response": [
								{
									"name": "Success - Product Category Updated (200 OK)",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {},
										"url": "{{base_url}}/api/{{api_version}}/products/categories/{{product_category_id}}/"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\"id\": \"{{product_category_id}}\",\"name\": \"Updated Books & Stationery\",\"description\": \"All kinds of books, updated description.\",\"icon\": \"fas fa-book-reader\",\"is_active\": true,\"parent_category\": null,\"slug\": \"updated-books-stationery\"}"
								}
							],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });"
										],
										"type": "text/javascript"
									}
								}
							]
						},
						{
							"name": "Partially Update Product Category (PATCH)",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin_access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"description\": \"The very best books and modern writing materials.\",\"is_active\": false}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/products/categories/{{product_category_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"products",
										"categories",
										"{{product_category_id}}",
										""
									]
								},
								"description": "Partially updates an existing product category. Requires admin privileges."
							},
							"response": [
								{
									"name": "Success - Product Category Partially Updated (200 OK)",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {},
										"url": "{{base_url}}/api/{{api_version}}/products/categories/{{product_category_id}}/"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\"id\": \"{{product_category_id}}\",\"name\": \"Updated Books & Stationery\",\"description\": \"The very best books and modern writing materials.\",\"icon\": \"fas fa-book-reader\",\"is_active\": false,\"parent_category\": null,\"slug\": \"updated-books-stationery\"}"
								}
							],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });"
										],
										"type": "text/javascript"
									}
								}
							]
						},
						{
							"name": "Delete Product Category",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/products/categories/{{product_category_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"products",
										"categories",
										"{{product_category_id}}",
										""
									]
								},
								"description": "Deletes a product category. Requires admin privileges."
							},
							"response": [
								{
									"name": "Success - Product Category Deleted (204 No Content)",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": "{{base_url}}/api/{{api_version}}/products/categories/{{product_category_id}}/"
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": null
								}
							],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () { pm.response.to.have.status(204); });"
										],
										"type": "text/javascript"
									}
								}
							]
						}
					],
					"description": "",
					"event": [],
					"protocolProfileBehavior": {}
				}
			],
			"description": "",
			"event": [],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Bids",
			"item": [
				{
					"name": "List Bids",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/bids/?service_request_id={{service_request_id_example}}&provider_id={{provider_id_example}}&status=pending",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"bids",
								""
							],
							"query": [
								{
									"key": "service_request_id",
									"value": "{{service_request_id_example}}",
									"description": "Filter bids for a specific service request (primarily for customers). Example: sreq_01HYP4XYZMPWJ8T5ZXV3N7Q9RST",
									"disabled": true
								},
								{
									"key": "provider_id",
									"value": "{{provider_id_example}}",
									"description": "Filter bids made by a specific provider (primarily for admins). Example: usr_01HYP3WXYMPWJ8T5ZXV3N7Q9RST",
									"disabled": true
								},
								{
									"key": "status",
									"value": "pending",
									"description": "Filter by bid status (e.g., pending, accepted, rejected, withdrawn).",
									"disabled": true
								}
							]
						},
						"description": "Retrieves a list of bids. The list is context-dependent:\n- Customers see bids on their service requests.\n- Providers see bids they have made.\n- Admins see all bids.\n\n**Permissions:** Authenticated User"
					},
					"response": [
						{
							"name": "Success - List of Bids (200 OK)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bids/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bids",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"count\": 1,\n    \"next\": null,\n    \"previous\": null,\n    \"results\": [\n        {\n            \"id\": \"bid_01HYP5ABCMPWJ8T5ZXV3N7Q9RST\",\n            \"service_request\": {\n                \"id\": \"sreq_01HYP4XYZMPWJ8T5ZXV3N7Q9RST\",\n                \"title\": \"Need urgent plumbing fix\"\n            },\n            \"provider\": {\n                \"id\": \"{{provider_id_example}}\",\n                \"username\": \"pro_plumber\"\n            },\n            \"amount\": \"75.00\",\n            \"currency\": \"USD\",\n            \"message\": \"I can fix this for you quickly.\",\n            \"status\": \"pending\",\n            \"created_at\": \"2023-11-15T10:00:00Z\",\n            \"updated_at\": \"2023-11-15T10:00:00Z\"\n        }\n    ]\n}"
						},
						{
							"name": "Error - Unauthorized (401)",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bids/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bids",
										""
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
						}
					],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful bid list\", function () {",
									"    if (pm.response.code === 200) {",
									"        pm.response.to.have.status(200);",
									"        var jsonData = pm.response.json();",
									"        pm.test(\"Response has count and results\", function() {",
									"            pm.expect(jsonData).to.have.property('count');",
									"            pm.expect(jsonData).to.have.property('results');",
									"            pm.expect(jsonData.results).to.be.an('array');",
									"        });",
									"        if (jsonData.results && jsonData.results.length > 0 && jsonData.results[0].id) {",
									"           // pm.environment.set(\"bid_id\", jsonData.results[0].id);",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create a New Bid",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{provider_access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service_request\": \"sreq_01HSRQSTSAMPLEID\",\n    \"amount\": \"60.00\",\n    \"message\": \"I am available tomorrow and can do it for $60. Experienced and reliable.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/bids/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"bids",
								""
							]
						},
						"description": "Allows an authenticated service provider to submit a bid for a specific service request.\n\n**Permissions:** IsAuthenticated AND IsProvider"
					},
					"response": [
						{
							"name": "Success - Bid Created (201 Created)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{provider_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"service_request\": \"sreq_01HSRQSTSAMPLEID\",\n    \"amount\": \"60.00\",\n    \"message\": \"I am available tomorrow and can do it for $60. Experienced and reliable.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bids/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bids",
										""
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"bid_01HYP5DEFMPWJ8T5ZXV3N7Q9TUV\",\n    \"service_request\": {\n        \"id\": \"sreq_01HSRQSTSAMPLEID\",\n        \"title\": \"Need urgent plumbing fix\"\n    },\n    \"provider\": {\n        \"id\": \"usr_currentProvider456\",\n        \"username\": \"MyProviderBiz\"\n    },\n    \"amount\": \"60.00\",\n    \"message\": \"I am available tomorrow and can do it for $60. Experienced and reliable.\",\n    \"status\": \"pending\",\n    \"created_at\": \"2024-05-31T11:00:00Z\",\n    \"updated_at\": \"2024-05-31T11:00:00Z\"\n}"
						},
						{
							"name": "Error - Validation Error (400 Bad Request)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{provider_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": \"invalid\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bids/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bids",
										""
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"service_request\": [\"This field is required.\"],\n    \"amount\": [\"A valid number is required.\"]\n}"
						},
						{
							"name": "Error - Forbidden (403)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{customer_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"service_request\": \"sreq_01HSRQSTSAMPLEID\",\n    \"amount\": \"60.00\",\n    \"message\": \"I can do this.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bids/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bids",
										""
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"You do not have permission to perform this action.\"\n}"
						},
						{
							"name": "Error - Not Found (404)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{provider_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"service_request\": \"sreq_nonexistent\",\n    \"amount\": \"60.00\",\n    \"message\": \"I can do this.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bids/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bids",
										""
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Service request not found or not available for bidding.\"\n}"
						}
					],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 for successful bid creation\", function () {",
									"    if (pm.response.code === 201) {",
									"        pm.response.to.have.status(201);",
									"        var jsonData = pm.response.json();",
									"        if (jsonData.id) {",
									"            pm.environment.set(\"bid_id\", jsonData.id);",
									"            console.log(\"Saved bid_id: \" + jsonData.id);",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Retrieve a Specific Bid",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/bids/{{bid_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"bids",
								"{{bid_id}}",
								""
							]
						},
						"description": "Retrieves details of a specific bid by its ID. Accessible by the customer of the service request, the provider who made the bid, or an admin.\n\n**Permissions:** IsAuthenticated AND (IsBidOwner OR IsServiceRequestOwnerForBid OR IsAdminUser)"
					},
					"response": [
						{
							"name": "Success - Bid Details (200 OK)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bids/{{bid_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bids",
										"{{bid_id}}",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"bid_01HYP5ABCMPWJ8T5ZXV3N7Q9RST\",\n    \"service_request\": {\n        \"id\": \"sreq_01HSRQSTSAMPLEID\",\n        \"title\": \"Need urgent plumbing fix\"\n    },\n    \"provider\": {\n        \"id\": \"usr_provider123\",\n        \"username\": \"QuickPlumberPro\"\n    },\n    \"amount\": \"75.50\",\n    \"message\": \"I can come by this afternoon and fix the leak. My quote is $75.50.\",\n    \"status\": \"pending\",\n    \"created_at\": \"2024-05-31T10:00:00Z\",\n    \"updated_at\": \"2024-05-31T10:00:00Z\"\n}"
						},
						{
							"name": "Error - Not Found (404)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bids/bid_nonexistent/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bids",
										"bid_nonexistent",
										""
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Not found.\"\n}"
						},
						{
							"name": "Error - Forbidden (403)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{unrelated_user_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bids/{{bid_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bids",
										"{{bid_id}}",
										""
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"You do not have permission to perform this action.\"\n}"
						}
					],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful bid retrieval\", function () {",
									"    if (pm.response.code === 200) {",
									"        pm.response.to.have.status(200);",
									"        var jsonData = pm.response.json();",
									"        pm.test(\"Bid has expected properties\", function() {",
									"            pm.expect(jsonData).to.have.property('id');",
									"            pm.expect(jsonData).to.have.property('service_request');",
									"            pm.expect(jsonData).to.have.property('provider');",
									"            pm.expect(jsonData).to.have.property('amount');",
									"            pm.expect(jsonData).to.have.property('status');",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update a Bid (Full Update)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{provider_access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": \"55.00\",\n    \"message\": \"Revised offer: I can do it for $55 if I can start by 2 PM.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/bids/{{bid_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"bids",
								"{{bid_id}}",
								""
							]
						},
						"description": "Allows a provider to update their own bid, typically if it's still in 'pending' status. All writable fields must be provided.\n\n**Permissions:** IsAuthenticated AND IsBidOwner (and bid status allows update, e.g., 'pending')"
					},
					"response": [
						{
							"name": "Success - Bid Updated (200 OK)",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{provider_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": \"55.00\",\n    \"message\": \"Revised offer: I can do it for $55 if I can start by 2 PM.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bids/{{bid_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bids",
										"{{bid_id}}",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"bid_01HYP5DEFMPWJ8T5ZXV3N7Q9TUV\",\n    \"service_request\": {\n        \"id\": \"sreq_01HSRQSTSAMPLEID\",\n        \"title\": \"Need urgent plumbing fix\"\n    },\n    \"provider\": {\n        \"id\": \"usr_currentProvider456\",\n        \"username\": \"MyProviderBiz\"\n    },\n    \"amount\": \"55.00\",\n    \"message\": \"Revised offer: I can do it for $55 if I can start by 2 PM.\",\n    \"status\": \"pending\",\n    \"created_at\": \"2024-05-31T11:00:00Z\",\n    \"updated_at\": \"2024-05-31T11:15:00Z\"\n}"
						},
						{
							"name": "Error - Forbidden (403)",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{customer_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": \"55.00\",\n    \"message\": \"Updated message\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bids/{{bid_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bids",
										"{{bid_id}}",
										""
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"You do not have permission to perform this action.\"\n}"
						},
						{
							"name": "Error - Bad Request (400)",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{provider_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": \"invalid\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bids/{{bid_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bids",
										"{{bid_id}}",
										""
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"amount\": [\"A valid number is required.\"],\n    \"detail\": \"Cannot update a bid that is no longer pending.\"\n}"
						}
					],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful bid update\", function () {",
									"    if (pm.response.code === 200) {",
									"        pm.response.to.have.status(200);",
									"        var jsonData = pm.response.json();",
									"        pm.test(\"Bid updated correctly\", function() {",
									"            pm.expect(jsonData.amount).to.eql(\"55.00\");",
									"            pm.expect(jsonData.message).to.include(\"Revised offer\");",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Partially Update a Bid (PATCH)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{provider_access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message\": \"Further clarification: My $55 quote includes all materials.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/bids/{{bid_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"bids",
								"{{bid_id}}",
								""
							]
						},
						"description": "Allows a provider to partially update their own bid (e.g., just the message or amount), if it's still in 'pending' status. Only include fields to change.\n\n**Permissions:** IsAuthenticated AND IsBidOwner (and bid status allows update)"
					},
					"response": [
						{
							"name": "Success - Bid Partially Updated (200 OK)",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{provider_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"message\": \"Further clarification: My $55 quote includes all materials.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bids/{{bid_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bids",
										"{{bid_id}}",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"bid_01HYP5DEFMPWJ8T5ZXV3N7Q9TUV\",\n    \"service_request\": {\n        \"id\": \"sreq_01HSRQSTSAMPLEID\",\n        \"title\": \"Need urgent plumbing fix\"\n    },\n    \"provider\": {\n        \"id\": \"usr_currentProvider456\",\n        \"username\": \"MyProviderBiz\"\n    },\n    \"amount\": \"55.00\",\n    \"message\": \"Further clarification: My $55 quote includes all materials.\",\n    \"status\": \"pending\",\n    \"created_at\": \"2024-05-31T11:00:00Z\",\n    \"updated_at\": \"2024-05-31T11:20:00Z\"\n}"
						},
						{
							"name": "Error - Forbidden (403)",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{customer_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"message\": \"Attempt to update someone else's bid\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bids/{{bid_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bids",
										"{{bid_id}}",
										""
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"You do not have permission to perform this action.\"\n}"
						},
						{
							"name": "Error - Bad Request (400)",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{provider_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": \"invalid\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bids/{{bid_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bids",
										"{{bid_id}}",
										""
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"amount\": [\"A valid number is required.\"]\n}"
						}
					],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful bid partial update\", function () {",
									"    if (pm.response.code === 200) {",
									"        pm.response.to.have.status(200);",
									"        var jsonData = pm.response.json();",
									"        pm.test(\"Bid message updated correctly\", function() {",
									"            pm.expect(jsonData.message).to.include(\"clarification\");",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete/Withdraw a Bid",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{provider_access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/bids/{{bid_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"bids",
								"{{bid_id}}",
								""
							]
						},
						"description": "Allows a provider to withdraw their bid, or an admin to delete any bid. This action is permanent and cannot be undone.\n\n**Permissions:** IsAuthenticated AND (IsBidOwner OR IsAdminUser)"
					},
					"response": [
						{
							"name": "Success - Bid Deleted (204 No Content)",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{provider_access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bids/{{bid_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bids",
										"{{bid_id}}",
										""
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Error - Not Found (404)",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{provider_access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bids/nonexistent_bid_id/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bids",
										"nonexistent_bid_id",
										""
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Not found.\"\n}"
						},
						{
							"name": "Error - Forbidden (403)",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{customer_access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bids/{{bid_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bids",
										"{{bid_id}}",
										""
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"You do not have permission to perform this action.\"\n}"
						},
						{
							"name": "Error - Conflict (409)",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{provider_access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bids/{{accepted_bid_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bids",
										"{{accepted_bid_id}}",
										""
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Cannot delete a bid that has been accepted or is already in progress.\"\n}"
						}
					],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 for successful bid deletion\", function () {",
									"    if (pm.response.code === 204) {",
									"        pm.response.to.have.status(204);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Accept a Bid",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{customer_access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/bids/{{bid_id}}/accept/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"bids",
								"{{bid_id}}",
								"accept",
								""
							]
						},
						"description": "Allows a customer to accept a bid on their service request. This action typically transitions the bid to 'accepted' status and may affect other bids on the same service request.\n\n**Permissions:** IsAuthenticated AND IsServiceRequestOwnerForBid"
					},
					"response": [
						{
							"name": "Success - Bid Accepted (200 OK)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{customer_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bids/{{bid_id}}/accept/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bids",
										"{{bid_id}}",
										"accept",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"bid_01HYP5ABCMPWJ8T5ZXV3N7Q9RST\",\n    \"service_request\": {\n        \"id\": \"sreq_01HSRQSTSAMPLEID\",\n        \"title\": \"Need urgent plumbing fix\"\n    },\n    \"provider\": {\n        \"id\": \"usr_provider123\",\n        \"username\": \"QuickPlumberPro\"\n    },\n    \"amount\": \"75.50\",\n    \"message\": \"I can come by this afternoon and fix the leak. My quote is $75.50.\",\n    \"status\": \"accepted\",\n    \"created_at\": \"2024-05-31T10:00:00Z\",\n    \"updated_at\": \"2024-05-31T10:30:00Z\"\n}"
						},
						{
							"name": "Error - Forbidden (403)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{provider_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bids/{{bid_id}}/accept/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bids",
										"{{bid_id}}",
										"accept",
										""
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"You do not have permission to perform this action.\"\n}"
						},
						{
							"name": "Error - Conflict (409)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{customer_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bids/{{bid_id}}/accept/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bids",
										"{{bid_id}}",
										"accept",
										""
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Cannot accept this bid. Another bid has already been accepted for this service request.\"\n}"
						}
					],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful bid acceptance\", function () {",
									"    if (pm.response.code === 200) {",
									"        pm.response.to.have.status(200);",
									"        var jsonData = pm.response.json();",
									"        pm.test(\"Bid status changed to accepted\", function() {",
									"            pm.expect(jsonData.status).to.eql(\"accepted\");",
									"        });",
									"        // Save the accepted bid ID for future tests",
									"        pm.environment.set(\"accepted_bid_id\", jsonData.id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Reject a Bid",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{customer_access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rejection_reason\": \"I found a more suitable provider for my needs.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/bids/{{bid_id}}/reject/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"bids",
								"{{bid_id}}",
								"reject",
								""
							]
						},
						"description": "Allows a customer to explicitly reject a bid on their service request. Optional rejection reason can be provided.\n\n**Permissions:** IsAuthenticated AND IsServiceRequestOwnerForBid"
					},
					"response": [
						{
							"name": "Success - Bid Rejected (200 OK)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{customer_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"rejection_reason\": \"I found a more suitable provider for my needs.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bids/{{bid_id}}/reject/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bids",
										"{{bid_id}}",
										"reject",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"bid_01HYP5DEFMPWJ8T5ZXV3N7Q9TUV\",\n    \"service_request\": {\n        \"id\": \"sreq_01HSRQSTSAMPLEID\",\n        \"title\": \"Need urgent plumbing fix\"\n    },\n    \"provider\": {\n        \"id\": \"usr_currentProvider456\",\n        \"username\": \"MyProviderBiz\"\n    },\n    \"amount\": \"55.00\",\n    \"message\": \"Revised offer: I can do it for $55 if I can start by 2 PM.\",\n    \"status\": \"rejected\",\n    \"rejection_reason\": \"I found a more suitable provider for my needs.\",\n    \"created_at\": \"2024-05-31T11:00:00Z\",\n    \"updated_at\": \"2024-05-31T11:45:00Z\"\n}"
						},
						{
							"name": "Error - Forbidden (403)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{provider_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"rejection_reason\": \"Trying to reject someone else's bid\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bids/{{bid_id}}/reject/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bids",
										"{{bid_id}}",
										"reject",
										""
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"You do not have permission to perform this action.\"\n}"
						},
						{
							"name": "Error - Conflict (409)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{customer_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"rejection_reason\": \"Trying to reject an already accepted bid\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bids/{{accepted_bid_id}}/reject/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bids",
										"{{accepted_bid_id}}",
										"reject",
										""
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Cannot reject a bid that has already been accepted.\"\n}"
						}
					],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful bid rejection\", function () {",
									"    if (pm.response.code === 200) {",
									"        pm.response.to.have.status(200);",
									"        var jsonData = pm.response.json();",
									"        pm.test(\"Bid status changed to rejected\", function() {",
									"            pm.expect(jsonData.status).to.eql(\"rejected\");",
									"            pm.expect(jsonData).to.have.property('rejection_reason');",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "Endpoints for managing bids on service requests.",
			"event": [],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Bookings",
			"item": [
				{
					"name": "List Bookings",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/bookings/?role=customer&status=confirmed",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"bookings",
								""
							],
							"query": [
								{
									"key": "role",
									"value": "customer"
								},
								{
									"key": "status",
									"value": "confirmed"
								}
							]
						},
						"description": "Retrieves a list of bookings. The list is context-dependent based on the user role:\n\n- Admin/Staff users can see all bookings.\n- Authenticated users (non-staff) see bookings where they are either the customer or the provider.\n- The list can be filtered by the query parameters.\n\n**Permissions:** IsAuthenticated\n\n**Query Parameters:**\n- role (optional): Filter bookings by user's role. Accepts 'customer' or 'provider'.\n- service (optional): Filter by service ID.\n- customer (optional): Filter by customer ID.\n- provider (optional): Filter by provider ID.\n- status (optional): Filter by booking status (e.g., 'pending', 'confirmed', 'completed').\n- search (optional): Search term for 'requirements' and 'notes' fields.\n- ordering (optional): Field to order by (e.g., 'created_at', '-booking_date', 'amount')."
					},
					"response": [
						{
							"name": "Success - List Bookings (200 OK)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bookings/?role=customer&status=confirmed",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bookings",
										""
									],
									"query": [
										{
											"key": "role",
											"value": "customer"
										},
										{
											"key": "status",
											"value": "confirmed"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"count\": 1,\n    \"next\": null,\n    \"previous\": null,\n    \"results\": [\n        {\n            \"id\": \"bk_01H...\",\n            \"service\": \"svc_01H...\",\n            \"service_title\": \"Deep Cleaning Service\",\n            \"customer\": \"usr_01H...\",\n            \"customer_name\": \"John Doe\",\n            \"provider\": \"usr_01H...\",\n            \"provider_name\": \"Jane Smith\",\n            \"booking_date\": \"2024-07-15\",\n            \"amount\": \"75.00\",\n            \"status\": \"confirmed\",\n            \"created_at\": \"2024-06-10T10:00:00Z\"\n        }\n    ]\n}"
						},
						{
							"name": "Error - Unauthorized (401)",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bookings/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bookings",
										""
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
						}
					],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is well-formed\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('count');",
									"    pm.expect(jsonData).to.have.property('results');",
									"    ",
									"    if (jsonData.count > 0) {",
									"        var booking = jsonData.results[0];",
									"        pm.expect(booking).to.have.property('id');",
									"        pm.expect(booking).to.have.property('service');",
									"        pm.expect(booking).to.have.property('booking_date');",
									"        pm.expect(booking).to.have.property('status');",
									"        ",
									"        // Store the first booking ID for other requests",
									"        if (booking.id) {",
									"            pm.environment.set(\"booking_id\", booking.id);",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create a New Booking",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{customer_access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service\": \"svc_01HXYZSAMPLESERVICEID\",\n    \"booking_date\": \"2024-08-01\",\n    \"amount\": \"50.00\",\n    \"requirements\": \"Please bring eco-friendly cleaning supplies.\",\n    \"notes\": \"Apartment number is 3B.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/bookings/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"bookings",
								""
							]
						},
						"description": "Allows an authenticated user (customer) to create a new booking for a service. The 'customer' field is automatically set to the requesting user. The 'provider' is derived from the specified service.\n\n**Permissions:** IsAuthenticated\n\n**Request Body Fields:**\n- service (UUID, required): UUID of the Service\n- booking_date (YYYY-MM-DD, required): Date of the booking\n- amount (Decimal, required): Price for the booking\n- requirements (string, optional): Special requirements for the service\n- notes (string, optional): Additional notes for the booking"
					},
					"response": [
						{
							"name": "Success - Booking Created (201 Created)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{customer_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"service\": \"svc_01HXYZSAMPLESERVICEID\",\n    \"booking_date\": \"2024-08-01\",\n    \"amount\": \"50.00\",\n    \"requirements\": \"Please bring eco-friendly cleaning supplies.\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bookings/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bookings",
										""
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"bk_01HNEWBOOKINGID\",\n    \"service\": \"svc_01HXYZSAMPLESERVICEID\",\n    \"booking_date\": \"2024-08-01\",\n    \"amount\": \"50.00\",\n    \"requirements\": \"Please bring eco-friendly cleaning supplies.\",\n    \"notes\": \"Apartment number is 3B.\"\n}"
						},
						{
							"name": "Error - Bad Request (400)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{customer_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"booking_date\": \"2024-08-01\",\n    \"amount\": \"50.00\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bookings/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bookings",
										""
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"service\": [\"This field is required.\"]\n}"
						},
						{
							"name": "Error - Service Not Active (400)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{customer_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"service\": \"svc_01HINACTIVESERVICEID\",\n    \"booking_date\": \"2024-08-01\",\n    \"amount\": \"50.00\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bookings/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bookings",
										""
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"service\": [\"This service is not active or does not exist.\"]\n}"
						}
					],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has booking details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('service');",
									"    pm.expect(jsonData).to.have.property('booking_date');",
									"    pm.expect(jsonData).to.have.property('amount');",
									"",
									"    // Store the created booking ID for other requests",
									"    if (jsonData.id) {",
									"        pm.environment.set(\"booking_id\", jsonData.id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Retrieve a Specific Booking",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/bookings/{{booking_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"bookings",
								"{{booking_id}}",
								""
							]
						},
						"description": "Retrieves details of a specific booking. The requesting user must be the customer, the provider, or have admin privileges.\n\n**Permissions:** IsAuthenticated and (IsAdminUser or IsBookingParticipant)\n\nThe IsBookingParticipant permission ensures that only users who are a participant in the booking (either as customer or provider) can access its details."
					},
					"response": [
						{
							"name": "Success - Booking Retrieved (200 OK)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bookings/{{booking_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bookings",
										"{{booking_id}}",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"bk_01H...\",\n    \"service\": \"svc_01H...\",\n    \"service_title\": \"Deep Cleaning Service\",\n    \"customer\": \"usr_01H...\",\n    \"customer_name\": \"John Doe\",\n    \"provider\": \"usr_01H...\",\n    \"provider_name\": \"Jane Smith\",\n    \"booking_date\": \"2024-07-15\",\n    \"amount\": \"75.00\",\n    \"requirements\": \"Need thorough cleaning of all rooms\",\n    \"notes\": \"Please arrive before 10 AM\",\n    \"status\": \"confirmed\",\n    \"created_at\": \"2024-06-10T10:00:00Z\",\n    \"updated_at\": \"2024-06-10T11:30:00Z\"\n}"
						},
						{
							"name": "Error - Not Found (404)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bookings/invalid_id/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bookings",
										"invalid_id",
										""
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Not found.\"\n}"
						},
						{
							"name": "Error - Forbidden (403)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bookings/bk_01HDIFFERENTUSER/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bookings",
										"bk_01HDIFFERENTUSER",
										""
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"You do not have permission to perform this action.\"\n}"
						}
					],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has booking details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('service');",
									"    pm.expect(jsonData).to.have.property('customer');",
									"    pm.expect(jsonData).to.have.property('provider');",
									"    pm.expect(jsonData).to.have.property('booking_date');",
									"    pm.expect(jsonData).to.have.property('amount');",
									"    pm.expect(jsonData).to.have.property('status');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Booking Status",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{provider_access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"completed\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/bookings/{{booking_id}}/status/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"bookings",
								"{{booking_id}}",
								"status",
								""
							]
						},
						"description": "Updates the status of a booking. Only specific status transitions are allowed based on the current status and the role of the user.\n\n**Permissions:** IsAuthenticated and (IsAdminUser or IsBookingParticipant)\n\n**Role-Based Status Updates:**\n- Provider can update status to: 'confirmed', 'in_progress', 'completed', 'cancelled'\n- Customer can update status to: 'cancelled'\n- Admin can update status to any value\n\n**Status Transition Rules:**\n- 'pending' → 'confirmed', 'cancelled'\n- 'confirmed' → 'in_progress', 'cancelled'\n- 'in_progress' → 'completed', 'cancelled'\n- 'completed' and 'cancelled' are terminal states\n\n**Request Body Fields:**\n- status (string, required): New status for the booking. Allowed values: 'pending', 'confirmed', 'in_progress', 'completed', 'cancelled'"
					},
					"response": [
						{
							"name": "Success - Status Updated (200 OK)",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{provider_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"completed\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bookings/{{booking_id}}/status/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bookings",
										"{{booking_id}}",
										"status",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"bk_01H...\",\n    \"status\": \"completed\",\n    \"updated_at\": \"2024-07-15T15:30:00Z\"\n}"
						},
						{
							"name": "Error - Invalid Status Transition (400)",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{provider_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"confirmed\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bookings/{{booking_id}}/status/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bookings",
										"{{booking_id}}",
										"status",
										""
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": [\"Invalid status transition from 'completed' to 'confirmed'\"]\n}"
						},
						{
							"name": "Error - Unauthorized Role (403)",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{customer_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"completed\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bookings/{{booking_id}}/status/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bookings",
										"{{booking_id}}",
										"status",
										""
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Customers cannot update booking status to 'completed'.\"\n}"
						}
					],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has updated status\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.eql('completed');",
									"    pm.expect(jsonData).to.have.property('updated_at');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Reschedule Booking",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{customer_access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"booking_date\": \"2024-08-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/bookings/{{booking_id}}/reschedule/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"bookings",
								"{{booking_id}}",
								"reschedule",
								""
							]
						},
						"description": "Reschedules a booking by updating its booking date. This endpoint can be used by both customers and providers, though providers may have restrictions on how close to the original date they can reschedule.\n\n**Permissions:** IsAuthenticated and (IsAdminUser or IsBookingParticipant)\n\n**Rescheduling Rules:**\n- A booking can only be rescheduled if its current status is 'pending' or 'confirmed'\n- Rescheduling is not allowed for bookings with status 'in_progress', 'completed', or 'cancelled'\n- New booking date must be in the future\n\n**Request Body Fields:**\n- booking_date (string in YYYY-MM-DD format, required): New date for the booking"
					},
					"response": [
						{
							"name": "Success - Booking Rescheduled (200 OK)",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{customer_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"booking_date\": \"2024-08-01\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bookings/{{booking_id}}/reschedule/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bookings",
										"{{booking_id}}",
										"reschedule",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"bk_01H...\",\n    \"booking_date\": \"2024-08-01\",\n    \"updated_at\": \"2024-06-20T14:15:00Z\"\n}"
						},
						{
							"name": "Error - Invalid Booking Date (400)",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{customer_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"booking_date\": \"2023-01-01\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bookings/{{booking_id}}/reschedule/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bookings",
										"{{booking_id}}",
										"reschedule",
										""
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"booking_date\": [\"Booking date must be in the future.\"]\n}"
						},
						{
							"name": "Error - Cannot Reschedule (400)",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{customer_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"booking_date\": \"2024-08-01\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bookings/{{booking_id}}/reschedule/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bookings",
										"{{booking_id}}",
										"reschedule",
										""
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Cannot reschedule a booking with status 'completed'.\"\n}"
						}
					],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has updated booking date\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('booking_date');",
									"    pm.expect(jsonData.booking_date).to.eql('2024-08-01');",
									"    pm.expect(jsonData).to.have.property('updated_at');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Cancel Booking",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cancellation_reason\": \"Schedule conflict\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/bookings/{{booking_id}}/cancel/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"bookings",
								"{{booking_id}}",
								"cancel",
								""
							]
						},
						"description": "Cancels a booking. This endpoint can be used by both customers and providers to cancel bookings. Different cancellation policies may apply based on the role and the timing of cancellation.\n\n**Permissions:** IsAuthenticated and (IsAdminUser or IsBookingParticipant)\n\n**Cancellation Rules:**\n- A booking can only be cancelled if its current status is 'pending', 'confirmed', or 'in_progress'\n- Cancellation is not allowed for bookings with status 'completed' or already 'cancelled'\n- Cancellation by providers may incur penalties if done too close to the booking date\n- Customers can cancel without penalties up to 24 hours before the booking\n\n**Request Body Fields:**\n- cancellation_reason (string, optional): Reason for cancelling the booking"
					},
					"response": [
						{
							"name": "Success - Booking Cancelled (200 OK)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"cancellation_reason\": \"Schedule conflict\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bookings/{{booking_id}}/cancel/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bookings",
										"{{booking_id}}",
										"cancel",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"bk_01H...\",\n    \"status\": \"cancelled\",\n    \"cancellation_reason\": \"Schedule conflict\",\n    \"cancelled_by\": \"customer\",\n    \"cancelled_at\": \"2024-06-25T09:30:00Z\"\n}"
						},
						{
							"name": "Error - Cannot Cancel (400)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"cancellation_reason\": \"Schedule conflict\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bookings/{{booking_id}}/cancel/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bookings",
										"{{booking_id}}",
										"cancel",
										""
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Cannot cancel a booking with status 'completed'.\"\n}"
						},
						{
							"name": "Error - Late Cancellation Fee (200 OK with Warning)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{customer_access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"cancellation_reason\": \"Emergency\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/bookings/{{booking_id}}/cancel/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"bookings",
										"{{booking_id}}",
										"cancel",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"bk_01H...\",\n    \"status\": \"cancelled\",\n    \"cancellation_reason\": \"Emergency\",\n    \"cancelled_by\": \"customer\",\n    \"cancelled_at\": \"2024-06-25T09:30:00Z\",\n    \"cancellation_fee\": \"25.00\",\n    \"warning\": \"Late cancellation fee of $25.00 has been applied.\"\n}"
						}
					],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Booking status is cancelled\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.eql('cancelled');",
									"    pm.expect(jsonData).to.have.property('cancelled_at');",
									"});",
									"",
									"pm.test(\"Cancellation reason is included\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('cancellation_reason');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "Endpoints for managing service bookings between customers and providers.",
			"event": [],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Calendar Integration",
			"item": [
				{
					"name": "Connect Calendar Account",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"calendar_type\": \"google\",\n    \"authorization_code\": \"4/0AeaYSHDytA6RR_3kj7Azef5txG6tp6RTWJm-pAgy8nPBLKxJPiQzJfaOQX\",\n    \"redirect_uri\": \"https://prbal.app/calendar-oauth/callback\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/calendar/connect",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"calendar",
								"connect"
							]
						},
						"description": "Connect a user's external calendar account (Google Calendar, Outlook, etc.) to Prbal. This allows synchronizing availability and bookings between Prbal and external calendar systems.\n\n**Permissions:** Any authenticated user\n\n**Request Body:**\n- `calendar_type` (required): Type of calendar to connect (e.g., 'google', 'outlook', 'apple')\n- `authorization_code` (required): OAuth authorization code from the calendar provider\n- `redirect_uri` (required): Redirect URI used in the OAuth flow"
					},
					"response": [
						{
							"name": "Success - Calendar Connected (200 OK)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"calendar_type\": \"google\",\n    \"authorization_code\": \"4/0AeaYSHDytA6RR_3kj7Azef5txG6tp6RTWJm-pAgy8nPBLKxJPiQzJfaOQX\",\n    \"redirect_uri\": \"https://prbal.app/calendar-oauth/callback\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/calendar/connect",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"calendar",
										"connect"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"cal_01H...\",\n    \"user_id\": \"{{user_id}}\",\n    \"calendar_type\": \"google\",\n    \"calendar_id\": \"user@example.com\",\n    \"calendar_name\": \"My Calendar\",\n    \"is_primary\": true,\n    \"sync_enabled\": true,\n    \"last_synced\": null,\n    \"created_at\": \"2024-06-01T11:30:00Z\",\n    \"updated_at\": \"2024-06-01T11:30:00Z\",\n    \"message\": \"Calendar connected successfully.\"\n}"
						},
						{
							"name": "Error - Invalid Authorization Code (400 Bad Request)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"calendar_type\": \"google\",\n    \"authorization_code\": \"invalid_code\",\n    \"redirect_uri\": \"https://prbal.app/calendar-oauth/callback\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/calendar/connect",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"calendar",
										"connect"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": \"Invalid authorization code.\",\n    \"detail\": \"The authorization code has expired or is invalid.\"\n}"
						},
						{
							"name": "Error - Unsupported Calendar Type (400 Bad Request)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"calendar_type\": \"unknown_calendar\",\n    \"authorization_code\": \"4/0AeaYSHDytA6RR_3kj7Azef5txG6tp6RTWJm-pAgy8nPBLKxJPiQzJfaOQX\",\n    \"redirect_uri\": \"https://prbal.app/calendar-oauth/callback\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/calendar/connect",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"calendar",
										"connect"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"calendar_type\": [\n        \"Unsupported calendar type. Supported types are: google, outlook, apple.\"\n    ]\n}"
						}
					]
				},
				{
					"name": "List Available Time Slots",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/calendar/available-slots?provider_id={{provider_id}}&date_from=2024-06-01&date_to=2024-06-07",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"calendar",
								"available-slots"
							],
							"query": [
								{
									"key": "provider_id",
									"value": "{{provider_id}}",
									"description": "ID of the service provider"
								},
								{
									"key": "date_from",
									"value": "2024-06-01",
									"description": "Start date for available slots search (YYYY-MM-DD)"
								},
								{
									"key": "date_to",
									"value": "2024-06-07",
									"description": "End date for available slots search (YYYY-MM-DD)"
								}
							]
						},
						"description": "Retrieves all available time slots for a specific service provider within a date range. This endpoint allows customers to see when a provider is available for booking.\n\n**Permissions:** Any authenticated user\n\n**Query Parameters:**\n- `provider_id` (required): The ID of the provider to check availability for\n- `date_from` (required): Start date in YYYY-MM-DD format\n- `date_to` (required): End date in YYYY-MM-DD format\n- `service_id` (optional): Filter slots by specific service type\n- `duration_minutes` (optional): Minimum slot duration in minutes"
					},
					"response": [
						{
							"name": "Success - Available Slots Retrieved (200 OK)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/calendar/available-slots?provider_id={{provider_id}}&date_from=2024-06-01&date_to=2024-06-07",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"calendar",
										"available-slots"
									],
									"query": [
										{
											"key": "provider_id",
											"value": "{{provider_id}}"
										},
										{
											"key": "date_from",
											"value": "2024-06-01"
										},
										{
											"key": "date_to",
											"value": "2024-06-07"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"available_slots\": [\n        {\n            \"date\": \"2024-06-01\",\n            \"day_of_week\": \"Saturday\",\n            \"slots\": [\n                {\n                    \"start_time\": \"09:00:00\",\n                    \"end_time\": \"10:30:00\",\n                    \"duration_minutes\": 90\n                },\n                {\n                    \"start_time\": \"11:00:00\",\n                    \"end_time\": \"12:30:00\",\n                    \"duration_minutes\": 90\n                },\n                {\n                    \"start_time\": \"14:00:00\",\n                    \"end_time\": \"16:00:00\",\n                    \"duration_minutes\": 120\n                }\n            ]\n        },\n        {\n            \"date\": \"2024-06-02\",\n            \"day_of_week\": \"Sunday\",\n            \"slots\": []\n        },\n        {\n            \"date\": \"2024-06-03\",\n            \"day_of_week\": \"Monday\",\n            \"slots\": [\n                {\n                    \"start_time\": \"10:00:00\",\n                    \"end_time\": \"11:30:00\",\n                    \"duration_minutes\": 90\n                },\n                {\n                    \"start_time\": \"13:00:00\",\n                    \"end_time\": \"14:30:00\",\n                    \"duration_minutes\": 90\n                },\n                {\n                    \"start_time\": \"15:00:00\",\n                    \"end_time\": \"17:00:00\",\n                    \"duration_minutes\": 120\n                }\n            ]\n        }\n    ],\n    \"provider\": {\n        \"id\": \"{{provider_id}}\",\n        \"username\": \"provider_username\",\n        \"timezone\": \"America/New_York\"\n    },\n    \"count\": 3\n}"
						},
						{
							"name": "Error - Invalid Date Format (400 Bad Request)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/calendar/available-slots?provider_id={{provider_id}}&date_from=06-01-2024&date_to=06-07-2024",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"calendar",
										"available-slots"
									],
									"query": [
										{
											"key": "provider_id",
											"value": "{{provider_id}}"
										},
										{
											"key": "date_from",
											"value": "06-01-2024"
										},
										{
											"key": "date_to",
											"value": "06-07-2024"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"date_from\": [\n        \"Invalid date format. Please use YYYY-MM-DD.\"\n    ],\n    \"date_to\": [\n        \"Invalid date format. Please use YYYY-MM-DD.\"\n    ]\n}"
						},
						{
							"name": "Error - Provider Not Found (404 Not Found)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/calendar/available-slots?provider_id=invalid_id&date_from=2024-06-01&date_to=2024-06-07",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"calendar",
										"available-slots"
									],
									"query": [
										{
											"key": "provider_id",
											"value": "invalid_id"
										},
										{
											"key": "date_from",
											"value": "2024-06-01"
										},
										{
											"key": "date_to",
											"value": "2024-06-07"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Provider not found.\"\n}"
						}
					]
				},
				{
					"name": "List Connected Calendars",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/calendar/connected",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"calendar",
								"connected"
							]
						},
						"description": "Retrieves a list of all calendar accounts connected by the authenticated user. This allows users to manage their connected calendar integrations.\n\n**Permissions:** Authenticated user (can only view their own connected calendars)"
					},
					"response": [
						{
							"name": "Success - Connected Calendars Retrieved (200 OK)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/calendar/connected",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"calendar",
										"connected"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"calendars\": [\n        {\n            \"id\": \"cal_01H...\",\n            \"user_id\": \"{{user_id}}\",\n            \"calendar_type\": \"google\",\n            \"calendar_id\": \"user@example.com\",\n            \"calendar_name\": \"My Google Calendar\",\n            \"is_primary\": true,\n            \"sync_enabled\": true,\n            \"last_synced\": \"2024-06-01T12:00:00Z\",\n            \"created_at\": \"2024-06-01T11:30:00Z\",\n            \"updated_at\": \"2024-06-01T12:00:00Z\"\n        },\n        {\n            \"id\": \"cal_02H...\",\n            \"user_id\": \"{{user_id}}\",\n            \"calendar_type\": \"outlook\",\n            \"calendar_id\": \"user@outlook.com\",\n            \"calendar_name\": \"My Outlook Calendar\",\n            \"is_primary\": false,\n            \"sync_enabled\": true,\n            \"last_synced\": \"2024-06-01T12:00:00Z\",\n            \"created_at\": \"2024-06-01T11:45:00Z\",\n            \"updated_at\": \"2024-06-01T12:00:00Z\"\n        }\n    ],\n    \"count\": 2\n}"
						},
						{
							"name": "Success - No Connected Calendars (200 OK)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/calendar/connected",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"calendar",
										"connected"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"calendars\": [],\n    \"count\": 0\n}"
						},
						{
							"name": "Error - Unauthorized (401)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer invalid_token",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/calendar/connected",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"calendar",
										"connected"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Authentication credentials were not provided or are invalid.\"\n}"
						}
					]
				}
			],
			"description": "Endpoints for managing calendar availability, bookings, and scheduling.",
			"event": [],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Messaging",
			"item": [
				{
					"name": "Message Threads",
					"item": [
						{
							"name": "List Message Threads",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/messaging/threads/?thread_type={{thread_type}}&ordering=-updated_at",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"messaging",
										"threads",
										""
									],
									"query": [
										{
											"key": "thread_type",
											"value": "{{thread_type}}",
											"description": "Filter by thread type (bid, booking, general, support)"
										},
										{
											"key": "ordering",
											"value": "-updated_at",
											"description": "Sort by update time (descending)"
										}
									]
								},
								"description": "List all message threads the authenticated user is participating in"
							},
							"response": [
								{
									"name": "Success Response",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"body": {
										"count": 2,
										"next": null,
										"previous": null,
										"results": [
											{
												"id": "thrd_01H...",
												"thread_type": "bid",
												"participants": [
													{
														"id": "usr_01H...",
														"username": "customer1"
													},
													{
														"id": "usr_02H...",
														"username": "provider1"
													}
												],
												"bid": "bid_01H...",
												"booking": null,
												"created_at": "2024-01-15T10:00:00Z",
												"updated_at": "2024-01-15T10:30:00Z"
											}
										]
									}
								}
							]
						},
						{
							"name": "Create Message Thread",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"participants\": [\"usr_01H...\", \"usr_02H...\"],\n    \"thread_type\": \"general\",\n    \"bid\": null,\n    \"booking\": null\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/messaging/threads/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"messaging",
										"threads",
										""
									]
								},
								"description": "Create a new message thread with specified participants"
							},
							"response": [
								{
									"name": "Success Response",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"body": {
										"id": "thrd_01H...",
										"thread_type": "general",
										"participants": [
											{
												"id": "usr_01H...",
												"username": "customer1"
											},
											{
												"id": "usr_02H...",
												"username": "provider1"
											}
										],
										"bid": null,
										"booking": null,
										"created_at": "2024-01-15T10:00:00Z",
										"updated_at": "2024-01-15T10:00:00Z"
									}
								}
							]
						},
						{
							"name": "Get Message Thread",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/messaging/threads/{{thread_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"messaging",
										"threads",
										"{{thread_id}}",
										""
									]
								},
								"description": "Get details of a specific message thread"
							},
							"response": [
								{
									"name": "Success Response",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"body": {
										"id": "thrd_01H...",
										"thread_type": "bid",
										"participants": [
											{
												"id": "usr_01H...",
												"username": "customer1"
											},
											{
												"id": "usr_02H...",
												"username": "provider1"
											}
										],
										"bid": "bid_01H...",
										"booking": null,
										"created_at": "2024-01-15T10:00:00Z",
										"updated_at": "2024-01-15T10:30:00Z",
										"last_message": {
											"id": "msg_01H...",
											"content": "Latest message in thread",
											"created_at": "2024-01-15T10:30:00Z"
										}
									}
								}
							]
						},
						{
							"name": "Update Message Thread",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"participants\": [\"usr_01H...\", \"usr_02H...\", \"usr_03H...\"]\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/messaging/threads/{{thread_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"messaging",
										"threads",
										"{{thread_id}}",
										""
									]
								},
								"description": "Update a message thread (e.g. add/remove participants)"
							},
							"response": [
								{
									"name": "Success Response",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"body": {
										"id": "thrd_01H...",
										"thread_type": "general",
										"participants": [
											{
												"id": "usr_01H...",
												"username": "customer1"
											},
											{
												"id": "usr_02H...",
												"username": "provider1"
											},
											{
												"id": "usr_03H...",
												"username": "provider2"
											}
										],
										"bid": null,
										"booking": null,
										"created_at": "2024-01-15T10:00:00Z",
										"updated_at": "2024-01-15T11:00:00Z"
									}
								}
							]
						},
						{
							"name": "Delete Message Thread",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/messaging/threads/{{thread_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"messaging",
										"threads",
										"{{thread_id}}",
										""
									]
								},
								"description": "Delete a message thread and all its messages"
							},
							"response": [
								{
									"name": "Success Response",
									"code": 204,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									]
								}
							]
						}
					],
					"description": "Endpoints for managing message threads between users",
					"event": [],
					"protocolProfileBehavior": {}
				},
				{
					"name": "Individual Messages",
					"item": [
						{
							"name": "List All Messages",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/messaging/messages/?thread={{thread_id}}&ordering=-created_at",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"messaging",
										"messages",
										""
									],
									"query": [
										{
											"key": "thread",
											"value": "{{thread_id}}",
											"description": "Filter by thread ID"
										},
										{
											"key": "ordering",
											"value": "-created_at",
											"description": "Sort by creation time (descending)"
										}
									]
								},
								"description": "List all messages the authenticated user can access"
							},
							"response": [
								{
									"name": "Success Response",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"body": {
										"count": 2,
										"next": null,
										"previous": null,
										"results": [
											{
												"id": "msg_01H...",
												"thread": "thrd_01H...",
												"sender": {
													"id": "usr_01H...",
													"username": "customer1"
												},
												"content": "Hello provider!",
												"read_by": [
													"usr_01H..."
												],
												"created_at": "2024-01-15T10:00:00Z",
												"updated_at": "2024-01-15T10:00:00Z"
											}
										]
									}
								}
							]
						},
						{
							"name": "Create Message",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"thread\": \"thrd_01H...\",\n    \"content\": \"New message content\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/messaging/messages/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"messaging",
										"messages",
										""
									]
								},
								"description": "Create a new message in a thread"
							},
							"response": [
								{
									"name": "Success Response",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"body": {
										"id": "msg_01H...",
										"thread": "thrd_01H...",
										"sender": {
											"id": "usr_01H...",
											"username": "customer1"
										},
										"content": "New message content",
										"read_by": [
											"usr_01H..."
										],
										"created_at": "2024-01-15T10:00:00Z",
										"updated_at": "2024-01-15T10:00:00Z"
									}
								}
							]
						},
						{
							"name": "Get Message",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/messaging/messages/{{message_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"messaging",
										"messages",
										"{{message_id}}",
										""
									]
								},
								"description": "Get details of a specific message"
							},
							"response": [
								{
									"name": "Success Response",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"body": {
										"id": "msg_01H...",
										"thread": "thrd_01H...",
										"sender": {
											"id": "usr_01H...",
											"username": "customer1"
										},
										"content": "Message content",
										"read_by": [
											"usr_01H...",
											"usr_02H..."
										],
										"created_at": "2024-01-15T10:00:00Z",
										"updated_at": "2024-01-15T10:00:00Z"
									}
								}
							]
						},
						{
							"name": "Update Message",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"Updated message content\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/messaging/messages/{{message_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"messaging",
										"messages",
										"{{message_id}}",
										""
									]
								},
								"description": "Update a message (only sender can update)"
							},
							"response": [
								{
									"name": "Success Response",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"body": {
										"id": "msg_01H...",
										"thread": "thrd_01H...",
										"sender": {
											"id": "usr_01H...",
											"username": "customer1"
										},
										"content": "Updated message content",
										"read_by": [
											"usr_01H...",
											"usr_02H..."
										],
										"created_at": "2024-01-15T10:00:00Z",
										"updated_at": "2024-01-15T10:30:00Z"
									}
								}
							]
						},
						{
							"name": "Delete Message",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/messaging/messages/{{message_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"messaging",
										"messages",
										"{{message_id}}",
										""
									]
								},
								"description": "Delete a message (only sender can delete)"
							},
							"response": [
								{
									"name": "Success Response",
									"code": 204,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									]
								}
							]
						},
						{
							"name": "Mark Messages as Read",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"message_ids\": [\"msg_01H...\", \"msg_02H...\"]\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/messaging/messages/mark_as_read/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"messaging",
										"messages",
										"mark_as_read",
										""
									]
								},
								"description": "Mark multiple messages as read"
							},
							"response": [
								{
									"name": "Success Response",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"body": {
										"status": "success",
										"marked_count": 2,
										"message": "Messages marked as read."
									}
								}
							]
						},
						{
							"name": "Get Unread Count",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/messaging/messages/unread_count/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"messaging",
										"messages",
										"unread_count",
										""
									]
								},
								"description": "Get count of unread messages for the authenticated user"
							},
							"response": [
								{
									"name": "Success Response",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"body": {
										"total_unread": 5,
										"thread_counts": {
											"thrd_01H...": 2,
											"thrd_02H...": 3
										}
									}
								}
							]
						}
					],
					"description": "Endpoints for managing individual messages",
					"event": [],
					"protocolProfileBehavior": {}
				},
				{
					"name": "Messages within a Thread",
					"item": [
						{
							"name": "List Messages in Thread",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/messaging/{{thread_id}}/?ordering=created_at",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"messaging",
										"{{thread_id}}",
										""
									],
									"query": [
										{
											"key": "ordering",
											"value": "created_at",
											"description": "Sort by creation time (ascending)"
										}
									]
								},
								"description": "Get all messages in a specific thread"
							},
							"response": [
								{
									"name": "Success Response",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"body": {
										"count": 2,
										"next": null,
										"previous": null,
										"results": [
											{
												"id": "msg_01H...",
												"sender": {
													"id": "usr_01H...",
													"username": "customer1"
												},
												"content": "First message",
												"read_by": [
													"usr_01H...",
													"usr_02H..."
												],
												"created_at": "2024-01-15T10:00:00Z"
											},
											{
												"id": "msg_02H...",
												"sender": {
													"id": "usr_02H...",
													"username": "provider1"
												},
												"content": "Second message",
												"read_by": [
													"usr_02H..."
												],
												"created_at": "2024-01-15T10:30:00Z"
											}
										]
									}
								}
							]
						},
						{
							"name": "Create Message in Thread",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"New message in thread\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/messaging/{{thread_id}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"{{api_version}}",
										"messaging",
										"{{thread_id}}",
										""
									]
								},
								"description": "Add a new message to a specific thread"
							},
							"response": [
								{
									"name": "Success Response",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"body": {
										"id": "msg_03H...",
										"sender": {
											"id": "usr_01H...",
											"username": "customer1"
										},
										"content": "New message in thread",
										"read_by": [
											"usr_01H..."
										],
										"created_at": "2024-01-15T11:00:00Z"
									}
								}
							]
						}
					],
					"description": "Endpoints for managing messages within a specific thread",
					"event": [],
					"protocolProfileBehavior": {}
				}
			],
			"description": "",
			"event": [],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Notifications (HTTP)",
			"item": [],
			"description": "",
			"event": [],
			"protocolProfileBehavior": {}
		},
		{
			"name": "AI Suggestions & Feedback",
			"item": [
				{
					"name": "AI Suggestions",
					"item": [],
					"description": "",
					"event": [],
					"protocolProfileBehavior": {}
				},
				{
					"name": "AI Feedback Logs",
					"item": [],
					"description": "",
					"event": [],
					"protocolProfileBehavior": {}
				}
			],
			"description": "",
			"event": [],
			"protocolProfileBehavior": {}
		},
		{
		  "name": "Verifications",
		  "description": "Endpoints for managing user verification requests and processing.",
		  "item": [
			{
			  "name": "List Verifications",
			  "request": {
				"method": "GET",
				"header": [
				  {
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"type": "text"
				  }
				],
				"url": {
				  "raw": "{{base_url}}/api/{{api_version}}/verifications/",
				  "host": ["{{base_url}}"],
				  "path": ["api", "{{api_version}}", "verifications", ""],
				  "query": [
					{
					  "key": "status",
					  "value": "pending",
					  "description": "Filter by status",
					  "disabled": true
					},
					{
					  "key": "verification_type",
					  "value": "identity",
					  "description": "Filter by verification type",
					  "disabled": true
					},
					{
					  "key": "document_type",
					  "value": "passport",
					  "description": "Filter by document type",
					  "disabled": true
					}
				  ]
				},
				"description": "Retrieves a list of verification requests for the authenticated user. For admin users, returns all verifications.\n\n**Permissions:** IsAuthenticated\n\n**Filters:**\n- status: Filter by verification status (pending, in_progress, verified, rejected, expired)\n- verification_type: Filter by type (identity, address, professional, etc.)\n- document_type: Filter by document type (passport, national_id, etc.)\n\n**Ordering:**\n- created_at (default: newest first)\n- updated_at\n- verified_at"
			  },
			  "response": [
				{
				  "name": "Success (200 OK)",
				  "originalRequest": {
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "{{base_url}}/api/{{api_version}}/verifications/"
					}
				  },
				  "status": "OK",
				  "code": 200,
				  "_postman_previewlanguage": "json",
				  "header": [
					{
					  "key": "Content-Type",
					  "value": "application/json"
					}
				  ],
				  "cookie": [],
				  "body": "{\n    \"count\": 2,\n    \"next\": null,\n    \"previous\": null,\n    \"results\": [\n        {\n            \"id\": \"ver_01HXABCDEFGH12345\",\n            \"user\": {\n                \"id\": \"usr_01H...\",\n                \"username\": \"provider1\",\n                \"user_type\": \"provider\"\n            },\n            \"verification_type\": \"identity\",\n            \"document_type\": \"passport\",\n            \"status\": \"pending\",\n            \"created_at\": \"2023-10-28T10:00:00Z\",\n            \"updated_at\": \"2023-10-28T10:00:00Z\"\n        }\n    ]\n}"
				}
			  ]
			},
			{
			  "name": "Submit Verification",
			  "request": {
				"method": "POST",
				"header": [
				  {
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"type": "text"
				  },
				  {
					"key": "Content-Type",
					"value": "multipart/form-data",
					"type": "text"
				  }
				],
				"body": {
				  "mode": "formdata",
				  "formdata": [
					{
					  "key": "document_type",
					  "value": "passport",
					  "type": "text"
					},
					{
					  "key": "verification_type",
					  "value": "identity",
					  "type": "text"
					},
					{
					  "key": "document_number",
					  "value": "A12345678",
					  "type": "text"
					},
					{
					  "key": "document_url",
					  "type": "file",
					  "src": []
					}
				  ]
				},
				"url": {
				  "raw": "{{base_url}}/api/{{api_version}}/verifications/",
				  "host": ["{{base_url}}"],
				  "path": ["api", "{{api_version}}", "verifications", ""]
				},
				"description": "Submit a new verification request with required documents.\n\n**Permissions:** IsAuthenticated"
			  },
			  "response": [
				{
				  "name": "Success (201 Created)",
				  "originalRequest": {
					"method": "POST",
					"header": [],
					"url": {
					  "raw": "{{base_url}}/api/{{api_version}}/verifications/"
					}
				  },
				  "status": "Created",
				  "code": 201,
				  "_postman_previewlanguage": "json",
				  "header": [
					{
					  "key": "Content-Type",
					  "value": "application/json"
					}
				  ],
				  "cookie": [],
				  "body": "{\n    \"id\": \"ver_01HXABCDEFGH12345\",\n    \"status\": \"pending\",\n    \"verification_type\": \"identity\",\n    \"document_type\": \"passport\",\n    \"document_number\": \"A12345678\",\n    \"created_at\": \"2023-10-28T10:00:00Z\",\n    \"message\": \"Verification request submitted successfully\"\n}"
				}
			  ]
			},
			{
			  "name": "Get Verification Details",
			  "request": {
				"method": "GET",
				"header": [
				  {
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"type": "text"
				  }
				],
				"url": {
				  "raw": "{{base_url}}/api/{{api_version}}/verifications/{{verification_id}}/",
				  "host": ["{{base_url}}"],
				  "path": ["api", "{{api_version}}", "verifications", "{{verification_id}}", ""]
				},
				"description": "Get detailed information about a specific verification request.\n\n**Permissions:** IsAuthenticated AND (IsVerificationOwner OR IsVerificationAdmin)"
			  },
			  "response": [
				{
				  "name": "Success (200 OK)",
				  "originalRequest": {
					"method": "GET",
					"header": [
					  {
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					  }
					],
					"url": {
					  "raw": "{{base_url}}/api/{{api_version}}/verifications/ver_01HXABCDEFGH12345/"
					}
				  },
				  "status": "OK",
				  "code": 200,
				  "_postman_previewlanguage": "json",
				  "header": [
					{
					  "key": "Content-Type",
					  "value": "application/json"
					}
				  ],
				  "cookie": [],
				  "body": "{\n    \"id\": \"ver_01HXABCDEFGH12345\",\n    \"user\": {\n        \"id\": \"usr_01H...\",\n        \"username\": \"provider1\",\n        \"email\": \"provider@example.com\",\n        \"user_type\": \"provider\"\n    },\n    \"verification_type\": \"identity\",\n    \"document_type\": \"passport\",\n    \"document_number\": \"A12345678\",\n    \"document_url\": \"https://example.com/documents/passport.jpg\",\n    \"status\": \"pending\",\n    \"verification_notes\": \"\",\n    \"created_at\": \"2023-10-28T10:00:00Z\",\n    \"updated_at\": \"2023-10-28T10:00:00Z\"\n}"
				},
				{
				  "name": "Error - Not Found (404 Not Found)",
				  "originalRequest": {
					"method": "GET",
					"header": [
					  {
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					  }
					],
					"url": {
					  "raw": "{{base_url}}/api/{{api_version}}/verifications/invalid_id/"
					}
				  },
				  "status": "Not Found",
				  "code": 404,
				  "_postman_previewlanguage": "json",
				  "header": [
					{
					  "key": "Content-Type",
					  "value": "application/json"
					}
				  ],
				  "cookie": [],
				  "body": "{\n    \"detail\": \"Not found.\"\n}"
				},
				{
				  "name": "Error - Permission Denied (403 Forbidden)",
				  "originalRequest": {
					"method": "GET",
					"header": [
					  {
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					  }
					],
					"url": {
					  "raw": "{{base_url}}/api/{{api_version}}/verifications/ver_01HDIFFERENTUSER/"
					}
				  },
				  "status": "Forbidden",
				  "code": 403,
				  "_postman_previewlanguage": "json",
				  "header": [
					{
					  "key": "Content-Type",
					  "value": "application/json"
					}
				  ],
				  "cookie": [],
				  "body": "{\n    \"detail\": \"You do not have permission to view this verification.\"\n}"
				},
				{
				  "name": "Error - Unauthorized (401 Unauthorized)",
				  "originalRequest": {
					"method": "GET",
					"header": [
					  {
						"key": "Authorization",
						"value": "Bearer invalid_token",
						"type": "text"
					  }
					],
					"url": {
					  "raw": "{{base_url}}/api/{{api_version}}/verifications/ver_01HXABCDEFGH12345/"
					}
				  },
				  "status": "Unauthorized",
				  "code": 401,
				  "_postman_previewlanguage": "json",
				  "header": [
					{
					  "key": "Content-Type",
					  "value": "application/json"
					}
				  ],
				  "cookie": [],
				  "body": "{\n    \"detail\": \"Authentication credentials were not provided.\"\n}"
				}
			  ]
			},
			{
			  "name": "Update Verification Status (Admin)",
			  "request": {
				"method": "PATCH",
				"header": [
				  {
					"key": "Authorization", 
					"value": "Bearer {{admin_access_token}}",
					"type": "text"
				  },
				  {
					"key": "Content-Type",
					"value": "application/json",
					"type": "text"
				  }
				],
				"body": {
				  "mode": "raw",
				  "raw": "{\n    \"status\": \"verified\",\n    \"verification_notes\": \"All documents verified successfully\",\n    \"expires_at\": \"2024-10-28T10:00:00Z\"\n}"
				},
				"url": {
				  "raw": "{{base_url}}/api/{{api_version}}/verifications/{{verification_id}}/",
				  "host": ["{{base_url}}"],
				  "path": ["api", "{{api_version}}", "verifications", "{{verification_id}}", ""]
				},
				"description": "Update the status and details of a verification request. Only available to admin users.\n\n**Permissions:** IsAuthenticated AND IsVerificationAdmin"
			  },
			  "response": [
				{
				  "name": "Success (200 OK)",
				  "body": "{\n    \"id\": \"ver_01HXABCDEFGH12345\",\n    \"status\": \"verified\",\n    \"verification_notes\": \"All documents verified successfully\",\n    \"verified_at\": \"2023-10-28T10:30:00Z\",\n    \"expires_at\": \"2024-10-28T10:00:00Z\",\n    \"message\": \"Verification status updated successfully\"\n}"
				},
				{
				  "name": "Error - Validation Error (400 Bad Request)",
				  "body": "{\n    \"status\": [\"Invalid status transition. Verification can only be marked as verified from pending or in_progress state.\"],\n    \"verification_notes\": [\"Notes are required when updating verification status.\"]\n}"
				},
				{
				  "name": "Error - Permission Denied (403 Forbidden)",
				  "body": "{\n    \"detail\": \"You do not have permission to perform this action. Only admins can update verification status.\"\n}"
				},
				{
				  "name": "Error - Not Found (404 Not Found)", 
				  "body": "{\n    \"detail\": \"Not found.\"\n}"
				}
			  ]
			},
			{
			  "name": "Cancel Verification",
			  "request": {
				"method": "POST",
				"header": [
				  {
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"type": "text"
				  }
				],
				"url": {
				  "raw": "{{base_url}}/api/{{api_version}}/verifications/{{verification_id}}/cancel/",
				  "host": ["{{base_url}}"],
				  "path": ["api", "{{api_version}}", "verifications", "{{verification_id}}", "cancel", ""]
				},
				"description": "Cancel a pending verification request. Can only be done by the request owner and only if the verification is in pending status.\n\n**Permissions:** IsAuthenticated AND IsVerificationOwner"
			  },
			  "response": [
				{
				  "name": "Success (200 OK)",
				  "body": "{\n    \"status\": \"success\",\n    \"message\": \"Verification request cancelled successfully.\"\n}"
				},
				{
				  "name": "Error - Invalid Status (400 Bad Request)",
				  "body": "{\n    \"detail\": \"Only pending verification requests can be cancelled.\"\n}"
				},
				{
				  "name": "Error - Permission Denied (403 Forbidden)",
				  "body": "{\n    \"detail\": \"You can only cancel your own verification requests.\"\n}"
				},
				{
				  "name": "Error - Not Found (404 Not Found)",
				  "body": "{\n    \"detail\": \"Not found.\"\n}"
				}
			  ]
			},
			{
			  "name": "Mark as In Progress (Admin)",
			  "request": {
				"method": "POST",
				"header": [
				  {
					"key": "Authorization",
					"value": "Bearer {{admin_access_token}}",
					"type": "text"
				  },
				  {
					"key": "Content-Type",
					"value": "application/json",
					"type": "text"
				  }
				],
				"body": {
				  "mode": "raw",
				  "raw": "{\n    \"verification_notes\": \"Started review of submitted documents.\"\n}"
				},
				"url": {
				  "raw": "{{base_url}}/api/{{api_version}}/verifications/{{verification_id}}/mark_in_progress/",
				  "host": ["{{base_url}}"],
				  "path": ["api", "{{api_version}}", "verifications", "{{verification_id}}", "mark_in_progress", ""]
				},
				"description": "Mark a verification request as in progress. Only available to admin users.\n\n**Permissions:** IsAuthenticated AND IsVerificationAdmin"
			  },
			  "response": [
				{
				  "name": "Success (200 OK)",
				  "body": "{\n    \"status\": \"success\",\n    \"message\": \"Verification marked as in progress.\",\n    \"verification_id\": \"ver_01HXABCDEFGH12345\",\n    \"status\": \"in_progress\",\n    \"verification_notes\": \"Started review of submitted documents.\"\n}"
				},
				{
				  "name": "Error - Invalid Status (400 Bad Request)",
				  "body": "{\n    \"detail\": \"Only pending verifications can be marked as in progress.\"\n}"
				},
				{
				  "name": "Error - Permission Denied (403 Forbidden)",
				  "body": "{\n    \"detail\": \"You do not have permission to perform this action. Only admins can update verification status.\"\n}"
				},
				{
				  "name": "Error - Not Found (404 Not Found)",
				  "body": "{\n    \"detail\": \"Not found.\"\n}"
				}
			  ]
			},
			{
			  "name": "Mark as Rejected (Admin)",
			  "request": {
				"method": "POST",
				"header": [
				  {
					"key": "Authorization",
					"value": "Bearer {{admin_access_token}}",
					"type": "text"
				  },
				  {
					"key": "Content-Type",
					"value": "application/json",
					"type": "text"
				  }
				],
				"body": {
				  "mode": "raw",
				  "raw": "{\n    \"rejection_reason\": \"Provided documents are unclear or incomplete.\",\n    \"verification_notes\": \"Please submit clearer copies of all required documents.\"\n}"
				},
				"url": {
				  "raw": "{{base_url}}/api/{{api_version}}/verifications/{{verification_id}}/mark_rejected/",
				  "host": ["{{base_url}}"],
				  "path": ["api", "{{api_version}}", "verifications", "{{verification_id}}", "mark_rejected", ""]
				},
				"description": "Mark a verification request as rejected with a reason. Only available to admin users.\n\n**Permissions:** IsAuthenticated AND IsVerificationAdmin"
			  },
			  "response": [
				{
				  "name": "Success (200 OK)",
				  "body": "{\n    \"status\": \"success\",\n    \"message\": \"Verification marked as rejected.\",\n    \"verification_id\": \"ver_01HXABCDEFGH12345\",\n    \"status\": \"rejected\",\n    \"rejection_reason\": \"Provided documents are unclear or incomplete.\",\n    \"verification_notes\": \"Please submit clearer copies of all required documents.\"\n}"
				},
				{
				  "name": "Error - Missing Reason (400 Bad Request)",
				  "body": "{\n    \"rejection_reason\": [\"Rejection reason is required.\"]\n}"
				},
				{
				  "name": "Error - Invalid Status (400 Bad Request)",
				  "body": "{\n    \"detail\": \"Only pending or in_progress verifications can be rejected.\"\n}"
				},
				{
				  "name": "Error - Permission Denied (403 Forbidden)",
				  "body": "{\n    \"detail\": \"You do not have permission to perform this action. Only admins can update verification status.\"\n}"
				},
				{
				  "name": "Error - Not Found (404 Not Found)",
				  "body": "{\n    \"detail\": \"Not found.\"\n}"
				}
			  ]
			},
			{
			  "name": "Cancel Verification",
			  "request": {
				"method": "POST",
				"header": [
				  {
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"type": "text"
				  }
				],
				"url": {
				  "raw": "{{base_url}}/api/{{api_version}}/verifications/{{verification_id}}/cancel/",
				  "host": ["{{base_url}}"],
				  "path": ["api", "{{api_version}}", "verifications", "{{verification_id}}", "cancel", ""]
				},
				"description": "Cancel a pending verification request. Can only be done by the request owner and only if the verification is in pending status.\n\n**Permissions:** IsAuthenticated AND IsVerificationOwner"
			  },
			  "response": [
				{
				  "name": "Success (200 OK)",
				  "originalRequest": {
					"method": "POST",
					"header": [
					  {
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					  }
					],
					"url": {
					  "raw": "{{base_url}}/api/{{api_version}}/verifications/ver_01HXABCDEFGH12345/cancel/"
					}
				  },
				  "status": "OK",
				  "code": 200,
				  "_postman_previewlanguage": "json",
				  "header": [
					{
					  "key": "Content-Type",
					  "value": "application/json"
					}
				  ],
				  "cookie": [],
				  "body": "{\n    \"status\": \"success\",\n    \"message\": \"Verification request cancelled successfully.\"\n}"
				},
				{
				  "name": "Error - Invalid Status (400 Bad Request)",
				  "originalRequest": {
					"method": "POST",
					"header": [
					  {
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					  }
					],
					"url": {
					  "raw": "{{base_url}}/api/{{api_version}}/verifications/ver_01HXABCDEFGH12345/cancel/"
					}
				  },
				  "status": "Bad Request",
				  "code": 400,
				  "_postman_previewlanguage": "json",
				  "header": [
					{
					  "key": "Content-Type",
					  "value": "application/json"
					}
				  ],
				  "cookie": [],
				  "body": "{\n    \"detail\": \"Only pending verification requests can be cancelled.\"\n}"
				},
				{
				  "name": "Error - Permission Denied (403 Forbidden)",
				  "originalRequest": {
					"method": "POST",
					"header": [
					  {
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					  }
					],
					"url": {
					  "raw": "{{base_url}}/api/{{api_version}}/verifications/ver_01HDIFFERENTUSER/cancel/"
					}
				  },
				  "status": "Forbidden",
				  "code": 403,
				  "_postman_previewlanguage": "json",
				  "header": [
					{
					  "key": "Content-Type",
					  "value": "application/json"
					}
				  ],
				  "cookie": [],
				  "body": "{\n    \"detail\": \"You can only cancel your own verification requests.\"\n}"
				}
			  ]
			},
			{
			  "name": "Get Verification Status Summary (Admin)",
			  "request": {
				"method": "GET",
				"header": [
				  {
					"key": "Authorization",
					"value": "Bearer {{admin_access_token}}",
					"type": "text"
				  }
				],
				"url": {
				  "raw": "{{base_url}}/api/{{api_version}}/verifications/status_summary/",
				  "host": ["{{base_url}}"],
				  "path": ["api", "{{api_version}}", "verifications", "status_summary", ""]
				},
				"description": "Get a summary count of verifications by status and type.\n\n**Permissions:** IsAuthenticated AND IsVerificationAdmin"
			  },
			  "response": [
				{
				  "name": "Success (200 OK)",
				  "body": "{\n    \"status_summary\": {\n        \"pending\": 5,\n        \"in_progress\": 2,\n        \"verified\": 10,\n        \"rejected\": 1,\n        \"expired\": 0\n    },\n    \"type_summary\": {\n        \"identity\": 8,\n        \"professional\": 6,\n        \"address\": 4\n    }\n}"
				}
			  ]
			}
		  ]
		},
		{
			"name": "Reviews",
			"item": [],
			"description": "",
			"event": [],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Sync (Offline Functionality)",
			"item": [],
			"description": "",
			"event": [],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Analytics & Admin Management",
			"item": [
				{
					"name": "Analytics Reports",
					"item": [],
					"description": "",
					"event": [],
					"protocolProfileBehavior": {}
				},
				{
					"name": "Admin User Management",
					"item": [],
					"description": "",
					"event": [],
					"protocolProfileBehavior": {}
				},
				{
					"name": "Admin Service Management",
					"item": [],
					"description": "",
					"event": [],
					"protocolProfileBehavior": {}
				}
			],
			"description": "",
			"event": [],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Payments",
			"item": [
				{
					"name": "Payment Processing",
					"item": [],
					"description": "",
					"event": [],
					"protocolProfileBehavior": {}
				},
				{
					"name": "Payment Gateway Accounts",
					"item": [],
					"description": "",
					"event": [],
					"protocolProfileBehavior": {}
				},
				{
					"name": "Payouts",
					"item": [],
					"description": "",
					"event": [],
					"protocolProfileBehavior": {}
				}
			],
			"description": "",
			"event": [],
			"protocolProfileBehavior": {}
		},
		{
			"name": "WebSocket APIs",
			"item": [
				{
					"name": "Real-time Notifications (WebSocket)",
					"item": [],
					"description": "",
					"event": [],
					"protocolProfileBehavior": {}
				},
				{
					"name": "Real-time Messaging (WebSocket)",
					"item": [],
					"description": "",
					"event": [],
					"protocolProfileBehavior": {}
				},
				{
					"name": "Real-time Booking Updates (WebSocket)",
					"item": [],
					"description": "",
					"event": [],
					"protocolProfileBehavior": {}
				}
			],
			"description": "",
			"event": [],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Health Checks",
			"item": [
				{
					"name": "System Health Endpoint",
					"item": [],
					"description": "",
					"event": [],
					"protocolProfileBehavior": {}
				},
				{
					"name": "Database Health Endpoint",
					"item": [],
					"description": "",
					"event": [],
					"protocolProfileBehavior": {}
				},
				{
					"name": "Service Dependency Health Endpoint",
					"item": [],
					"description": "",
					"event": [],
					"protocolProfileBehavior": {}
				}
			],
			"description": "",
			"event": [],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Metrics",
			"item": [
				{
					"name": "Prometheus Metrics Endpoint",
					"item": [],
					"description": "",
					"event": [],
					"protocolProfileBehavior": {}
				}
			],
			"description": "",
			"event": [],
			"protocolProfileBehavior": {}
		}
	]
}