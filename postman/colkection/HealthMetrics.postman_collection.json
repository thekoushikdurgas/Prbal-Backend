{
	"info": {
		"_postman_id": "28a5de6b-3d9d-4f22-94ba-6a0ce894f33b",
		"name": "Prbal API for Health",
		"description": "API collection for the Prbal application, generated from Prbal-API.md. Covers user types: providers, customers, and admins.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20572666",
		"_collection_link": "https://prbal5-1003.postman.co/workspace/prbal~38626842-f3c9-4a6f-a7bc-0367cd9a6824/collection/20572666-28a5de6b-3d9d-4f22-94ba-6a0ce894f33b?action=share&source=collection_link&creator=20572666"
	},
	"item": [
		{
			"name": "Health Checks",
			"item": [
				{
					"name": "System Health Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has status field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"});",
									"",
									"pm.test(\"System is healthy\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('healthy');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health",
								""
							]
						},
						"description": "Check the overall system health status including server uptime, memory usage, and basic system metrics."
					},
					"response": []
				},
				{
					"name": "Database Health Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has database status\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('database_status');",
									"});",
									"",
									"pm.test(\"Database is connected\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.database_status).to.eql('connected');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health/db/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health",
								"db",
								""
							]
						},
						"description": "Check database connectivity and performance metrics including connection pool status and query response times."
					},
					"response": []
				}
			]
		},
		{
			"name": "Metrics",
			"item": [
				{
					"name": "Prometheus Metrics Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is text/plain\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');",
									"});",
									"",
									"pm.test(\"Response contains Prometheus metrics\", function () {",
									"    var responseText = pm.response.text();",
									"    pm.expect(responseText).to.include('# HELP');",
									"    pm.expect(responseText).to.include('# TYPE');",
									"});",
									"",
									"pm.test(\"Response contains basic metrics\", function () {",
									"    var responseText = pm.response.text();",
									"    // Check for common Django/application metrics",
									"    pm.expect(responseText).to.match(/django_.*|http_.*|process_.*/);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/metrics/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"metrics",
								""
							]
						},
						"description": "Retrieve Prometheus-formatted metrics for monitoring and alerting. Returns application metrics, request counts, response times, and custom business metrics."
					},
					"response": []
				}
			]
		}
	]
}