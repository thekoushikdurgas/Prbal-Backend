version: '3.8'

services:
  web:
    build: .
    command: gunicorn prbal_project.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 120
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    env_file:
      - ./.env.production
    depends_on:
      - db
      - redis
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - prbal_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  asgi:
    build:
      context: .
      dockerfile: Dockerfile
    command: daphne -b 0.0.0.0 -p 8001 prbal_project.asgi:application
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    env_file:
      - ./.env.production
    depends_on:
      - db
      - redis
    restart: always
    networks:
      - prbal_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  celery:
    build: .
    command: celery -A prbal_project worker -l info -Q default,high_priority,payments,notifications,ai_suggestions,verification
    volumes:
      - .:/app
    env_file:
      - ./.env.production
    depends_on:
      - db
      - redis
    restart: always
    networks:
      - prbal_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  celery-beat:
    build: .
    command: celery -A prbal_project beat -l info
    volumes:
      - .:/app
    env_file:
      - ./.env.production
    depends_on:
      - db
      - redis
      - celery
    restart: always
    networks:
      - prbal_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  flower:
    build: .
    command: celery -A prbal_project flower --port=5555 --basic_auth=${FLOWER_USER}:${FLOWER_PASSWORD}
    ports:
      - "5555:5555"
    env_file:
      - ./.env.production
    depends_on:
      - celery
    restart: always
    networks:
      - prbal_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env.production
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - prbal_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  redis:
    image: redis:7
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - prbal_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  nginx:
    image: nginx:1.21
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/prod.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - static_volume:/home/app/staticfiles
      - media_volume:/home/app/media
    depends_on:
      - web
      - asgi
    restart: always
    networks:
      - prbal_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  prometheus:
    image: prom/prometheus:v2.42.0
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - prbal_network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  grafana:
    image: grafana/grafana:9.4.7
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    env_file:
      - ./.env.production
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - prbal_network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

networks:
  prbal_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  prometheus_data:
  grafana_data:
